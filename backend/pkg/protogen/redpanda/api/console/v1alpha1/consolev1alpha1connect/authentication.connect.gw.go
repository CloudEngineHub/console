// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/console/v1alpha1/authentication.proto

package consolev1alpha1connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1alpha1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/console/v1alpha1"
)

// AuthenticationServiceGatewayServer implements the gRPC server API for the AuthenticationService
// service.
type AuthenticationServiceGatewayServer struct {
	v1alpha1.UnimplementedAuthenticationServiceServer
	loginSaslScram            connect_gateway.UnaryHandler[v1alpha1.LoginSaslScramRequest, v1alpha1.LoginSaslScramResponse]
	listAuthenticationMethods connect_gateway.UnaryHandler[v1alpha1.ListAuthenticationMethodsRequest, v1alpha1.ListAuthenticationMethodsResponse]
}

// NewAuthenticationServiceGatewayServer constructs a Connect-Gateway gRPC server for the
// AuthenticationService service.
func NewAuthenticationServiceGatewayServer(svc AuthenticationServiceHandler, opts ...connect_gateway.HandlerOption) *AuthenticationServiceGatewayServer {
	return &AuthenticationServiceGatewayServer{
		loginSaslScram:            connect_gateway.NewUnaryHandler(AuthenticationServiceLoginSaslScramProcedure, svc.LoginSaslScram, opts...),
		listAuthenticationMethods: connect_gateway.NewUnaryHandler(AuthenticationServiceListAuthenticationMethodsProcedure, svc.ListAuthenticationMethods, opts...),
	}
}

func (s *AuthenticationServiceGatewayServer) LoginSaslScram(ctx context.Context, req *v1alpha1.LoginSaslScramRequest) (*v1alpha1.LoginSaslScramResponse, error) {
	return s.loginSaslScram(ctx, req)
}

func (s *AuthenticationServiceGatewayServer) ListAuthenticationMethods(ctx context.Context, req *v1alpha1.ListAuthenticationMethodsRequest) (*v1alpha1.ListAuthenticationMethodsResponse, error) {
	return s.listAuthenticationMethods(ctx, req)
}

// RegisterAuthenticationServiceHandlerGatewayServer registers the Connect handlers for the
// AuthenticationService "svc" to "mux".
func RegisterAuthenticationServiceHandlerGatewayServer(mux *runtime.ServeMux, svc AuthenticationServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1alpha1.RegisterAuthenticationServiceHandlerServer(context.TODO(), mux, NewAuthenticationServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
