// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: redpanda/api/console/v1alpha1/rp_connect.proto

package consolev1alpha1

import (
	reflect "reflect"
	sync "sync"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PatchOperation int32

const (
	PatchOperation_PATCH_OPERATION_UNSPECIFIED PatchOperation = 0
	PatchOperation_PATCH_OPERATION_ADD         PatchOperation = 1
	PatchOperation_PATCH_OPERATION_ADD_FROM    PatchOperation = 2
	PatchOperation_PATCH_OPERATION_DELETE      PatchOperation = 3
	PatchOperation_PATCH_OPERATION_SET         PatchOperation = 4
	PatchOperation_PATCH_OPERATION_REPLACE     PatchOperation = 5
	PatchOperation_PATCH_OPERATION_COPY        PatchOperation = 6
	PatchOperation_PATCH_OPERATION_MOVE_ABOVE  PatchOperation = 7
	PatchOperation_PATCH_OPERATION_MOVE_BELOW  PatchOperation = 8
)

// Enum value maps for PatchOperation.
var (
	PatchOperation_name = map[int32]string{
		0: "PATCH_OPERATION_UNSPECIFIED",
		1: "PATCH_OPERATION_ADD",
		2: "PATCH_OPERATION_ADD_FROM",
		3: "PATCH_OPERATION_DELETE",
		4: "PATCH_OPERATION_SET",
		5: "PATCH_OPERATION_REPLACE",
		6: "PATCH_OPERATION_COPY",
		7: "PATCH_OPERATION_MOVE_ABOVE",
		8: "PATCH_OPERATION_MOVE_BELOW",
	}
	PatchOperation_value = map[string]int32{
		"PATCH_OPERATION_UNSPECIFIED": 0,
		"PATCH_OPERATION_ADD":         1,
		"PATCH_OPERATION_ADD_FROM":    2,
		"PATCH_OPERATION_DELETE":      3,
		"PATCH_OPERATION_SET":         4,
		"PATCH_OPERATION_REPLACE":     5,
		"PATCH_OPERATION_COPY":        6,
		"PATCH_OPERATION_MOVE_ABOVE":  7,
		"PATCH_OPERATION_MOVE_BELOW":  8,
	}
)

func (x PatchOperation) Enum() *PatchOperation {
	p := new(PatchOperation)
	*p = x
	return p
}

func (x PatchOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatchOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_rp_connect_proto_enumTypes[0].Descriptor()
}

func (PatchOperation) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_rp_connect_proto_enumTypes[0]
}

func (x PatchOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatchOperation.Descriptor instead.
func (PatchOperation) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDescGZIP(), []int{0}
}

// GetConnectPipelineRequest is the request to retrieve a pipeline by name.
type LintConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YamlConfig string `protobuf:"bytes,1,opt,name=yaml_config,json=yamlConfig,proto3" json:"yaml_config,omitempty"`
}

func (x *LintConfigRequest) Reset() {
	*x = LintConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LintConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LintConfigRequest) ProtoMessage() {}

func (x *LintConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LintConfigRequest.ProtoReflect.Descriptor instead.
func (*LintConfigRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDescGZIP(), []int{0}
}

func (x *LintConfigRequest) GetYamlConfig() string {
	if x != nil {
		return x.YamlConfig
	}
	return ""
}

type LintConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool                       `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Lints []*LintConfigResponse_Lint `protobuf:"bytes,2,rep,name=lints,proto3" json:"lints,omitempty"`
}

func (x *LintConfigResponse) Reset() {
	*x = LintConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LintConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LintConfigResponse) ProtoMessage() {}

func (x *LintConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LintConfigResponse.ProtoReflect.Descriptor instead.
func (*LintConfigResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDescGZIP(), []int{1}
}

func (x *LintConfigResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *LintConfigResponse) GetLints() []*LintConfigResponse_Lint {
	if x != nil {
		return x.Lints
	}
	return nil
}

// TreeNodeGroup represents a group of tree nodes.
type TreeNodeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children []*TreeNode `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *TreeNodeGroup) Reset() {
	*x = TreeNodeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeNodeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeNodeGroup) ProtoMessage() {}

func (x *TreeNodeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeNodeGroup.ProtoReflect.Descriptor instead.
func (*TreeNodeGroup) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDescGZIP(), []int{2}
}

func (x *TreeNodeGroup) GetChildren() []*TreeNode {
	if x != nil {
		return x.Children
	}
	return nil
}

type NodeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation PatchOperation `protobuf:"varint,1,opt,name=operation,proto3,enum=redpanda.api.console.v1alpha1.PatchOperation" json:"operation,omitempty"`
	Path      string         `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Kind      string         `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *NodeAction) Reset() {
	*x = NodeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAction) ProtoMessage() {}

func (x *NodeAction) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAction.ProtoReflect.Descriptor instead.
func (*NodeAction) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDescGZIP(), []int{3}
}

func (x *NodeAction) GetOperation() PatchOperation {
	if x != nil {
		return x.Operation
	}
	return PatchOperation_PATCH_OPERATION_UNSPECIFIED
}

func (x *NodeAction) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *NodeAction) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// TreeNode represents a tree node.
type TreeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label          string           `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Path           string           `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Kind           string           `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Type           string           `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Children       []*TreeNode      `protobuf:"bytes,5,rep,name=children,proto3" json:"children,omitempty"`
	GoupedChildren []*TreeNodeGroup `protobuf:"bytes,6,rep,name=gouped_children,json=goupedChildren,proto3" json:"gouped_children,omitempty"`
	RootAction     bool             `protobuf:"varint,7,opt,name=root_action,json=rootAction,proto3" json:"root_action,omitempty"`
	Actions        []*NodeAction    `protobuf:"bytes,8,rep,name=actions,proto3" json:"actions,omitempty"`
	LineStart      int32            `protobuf:"varint,9,opt,name=line_start,json=lineStart,proto3" json:"line_start,omitempty"`
	LineEnd        int32            `protobuf:"varint,10,opt,name=line_end,json=lineEnd,proto3" json:"line_end,omitempty"`
	LintErrors     []string         `protobuf:"bytes,11,rep,name=lint_errors,json=lintErrors,proto3" json:"lint_errors,omitempty"`
}

func (x *TreeNode) Reset() {
	*x = TreeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeNode) ProtoMessage() {}

func (x *TreeNode) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeNode.ProtoReflect.Descriptor instead.
func (*TreeNode) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDescGZIP(), []int{4}
}

func (x *TreeNode) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *TreeNode) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TreeNode) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *TreeNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TreeNode) GetChildren() []*TreeNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *TreeNode) GetGoupedChildren() []*TreeNodeGroup {
	if x != nil {
		return x.GoupedChildren
	}
	return nil
}

func (x *TreeNode) GetRootAction() bool {
	if x != nil {
		return x.RootAction
	}
	return false
}

func (x *TreeNode) GetActions() []*NodeAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *TreeNode) GetLineStart() int32 {
	if x != nil {
		return x.LineStart
	}
	return 0
}

func (x *TreeNode) GetLineEnd() int32 {
	if x != nil {
		return x.LineEnd
	}
	return 0
}

func (x *TreeNode) GetLintErrors() []string {
	if x != nil {
		return x.LintErrors
	}
	return nil
}

// GeneratePipelineFlowRequest is the request to retrieve a pipeline flow information.
type GeneratePipelineFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigYaml string `protobuf:"bytes,1,opt,name=config_yaml,json=configYaml,proto3" json:"config_yaml,omitempty"`
}

func (x *GeneratePipelineFlowRequest) Reset() {
	*x = GeneratePipelineFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratePipelineFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePipelineFlowRequest) ProtoMessage() {}

func (x *GeneratePipelineFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePipelineFlowRequest.ProtoReflect.Descriptor instead.
func (*GeneratePipelineFlowRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDescGZIP(), []int{5}
}

func (x *GeneratePipelineFlowRequest) GetConfigYaml() string {
	if x != nil {
		return x.ConfigYaml
	}
	return ""
}

// GeneratePipelineFlowResponse is the response.
type GeneratePipelineFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream    []*TreeNode `protobuf:"bytes,1,rep,name=stream,proto3" json:"stream,omitempty"`
	Resources []*TreeNode `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *GeneratePipelineFlowResponse) Reset() {
	*x = GeneratePipelineFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratePipelineFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePipelineFlowResponse) ProtoMessage() {}

func (x *GeneratePipelineFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePipelineFlowResponse.ProtoReflect.Descriptor instead.
func (*GeneratePipelineFlowResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDescGZIP(), []int{6}
}

func (x *GeneratePipelineFlowResponse) GetStream() []*TreeNode {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *GeneratePipelineFlowResponse) GetResources() []*TreeNode {
	if x != nil {
		return x.Resources
	}
	return nil
}

type LintConfigResponse_Lint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line   int32  `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column int32  `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *LintConfigResponse_Lint) Reset() {
	*x = LintConfigResponse_Lint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LintConfigResponse_Lint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LintConfigResponse_Lint) ProtoMessage() {}

func (x *LintConfigResponse_Lint) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LintConfigResponse_Lint.ProtoReflect.Descriptor instead.
func (*LintConfigResponse_Lint) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDescGZIP(), []int{1, 0}
}

func (x *LintConfigResponse_Lint) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *LintConfigResponse_Lint) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *LintConfigResponse_Lint) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_redpanda_api_console_v1alpha1_rp_connect_proto protoreflect.FileDescriptor

var file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x72, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1d, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a,
	0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x11,
	0x4c, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x79, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0x72, 0x06, 0x10, 0x00, 0x18,
	0x80, 0x80, 0x40, 0x52, 0x0a, 0x79, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xc4, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x05,
	0x6c, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c,
	0x69, 0x6e, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x4a, 0x0a, 0x04, 0x4c, 0x69,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x0d, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x81, 0x01, 0x0a,
	0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0xb9, 0x03, 0x0a, 0x08, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x43, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x12, 0x55, 0x0a, 0x0f, 0x67, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72,
	0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x67, 0x6f, 0x75,
	0x70, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x69, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x46, 0x0a, 0x1b,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x59, 0x61, 0x6d, 0x6c, 0x22, 0xa6, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2a, 0x94, 0x02,
	0x0a, 0x0e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44,
	0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x04, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x50, 0x59, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x41, 0x42, 0x4f,
	0x56, 0x45, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x42, 0x45, 0x4c,
	0x4f, 0x57, 0x10, 0x08, 0x32, 0xa1, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x91, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xaf, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0e,
	0x52, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x63, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x41, 0x43, 0xaa, 0x02, 0x1d, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1d, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x29, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDescOnce sync.Once
	file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDescData = file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDesc
)

func file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDescGZIP() []byte {
	file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDescOnce.Do(func() {
		file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDescData)
	})
	return file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDescData
}

var file_redpanda_api_console_v1alpha1_rp_connect_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_redpanda_api_console_v1alpha1_rp_connect_proto_goTypes = []interface{}{
	(PatchOperation)(0),                  // 0: redpanda.api.console.v1alpha1.PatchOperation
	(*LintConfigRequest)(nil),            // 1: redpanda.api.console.v1alpha1.LintConfigRequest
	(*LintConfigResponse)(nil),           // 2: redpanda.api.console.v1alpha1.LintConfigResponse
	(*TreeNodeGroup)(nil),                // 3: redpanda.api.console.v1alpha1.TreeNodeGroup
	(*NodeAction)(nil),                   // 4: redpanda.api.console.v1alpha1.NodeAction
	(*TreeNode)(nil),                     // 5: redpanda.api.console.v1alpha1.TreeNode
	(*GeneratePipelineFlowRequest)(nil),  // 6: redpanda.api.console.v1alpha1.GeneratePipelineFlowRequest
	(*GeneratePipelineFlowResponse)(nil), // 7: redpanda.api.console.v1alpha1.GeneratePipelineFlowResponse
	(*LintConfigResponse_Lint)(nil),      // 8: redpanda.api.console.v1alpha1.LintConfigResponse.Lint
}
var file_redpanda_api_console_v1alpha1_rp_connect_proto_depIdxs = []int32{
	8,  // 0: redpanda.api.console.v1alpha1.LintConfigResponse.lints:type_name -> redpanda.api.console.v1alpha1.LintConfigResponse.Lint
	5,  // 1: redpanda.api.console.v1alpha1.TreeNodeGroup.children:type_name -> redpanda.api.console.v1alpha1.TreeNode
	0,  // 2: redpanda.api.console.v1alpha1.NodeAction.operation:type_name -> redpanda.api.console.v1alpha1.PatchOperation
	5,  // 3: redpanda.api.console.v1alpha1.TreeNode.children:type_name -> redpanda.api.console.v1alpha1.TreeNode
	3,  // 4: redpanda.api.console.v1alpha1.TreeNode.gouped_children:type_name -> redpanda.api.console.v1alpha1.TreeNodeGroup
	4,  // 5: redpanda.api.console.v1alpha1.TreeNode.actions:type_name -> redpanda.api.console.v1alpha1.NodeAction
	5,  // 6: redpanda.api.console.v1alpha1.GeneratePipelineFlowResponse.stream:type_name -> redpanda.api.console.v1alpha1.TreeNode
	5,  // 7: redpanda.api.console.v1alpha1.GeneratePipelineFlowResponse.resources:type_name -> redpanda.api.console.v1alpha1.TreeNode
	6,  // 8: redpanda.api.console.v1alpha1.RedpandaConnectService.GeneratePipelineFlow:input_type -> redpanda.api.console.v1alpha1.GeneratePipelineFlowRequest
	1,  // 9: redpanda.api.console.v1alpha1.RedpandaConnectService.LintConfig:input_type -> redpanda.api.console.v1alpha1.LintConfigRequest
	7,  // 10: redpanda.api.console.v1alpha1.RedpandaConnectService.GeneratePipelineFlow:output_type -> redpanda.api.console.v1alpha1.GeneratePipelineFlowResponse
	2,  // 11: redpanda.api.console.v1alpha1.RedpandaConnectService.LintConfig:output_type -> redpanda.api.console.v1alpha1.LintConfigResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_redpanda_api_console_v1alpha1_rp_connect_proto_init() }
func file_redpanda_api_console_v1alpha1_rp_connect_proto_init() {
	if File_redpanda_api_console_v1alpha1_rp_connect_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LintConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LintConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeNodeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneratePipelineFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneratePipelineFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LintConfigResponse_Lint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_console_v1alpha1_rp_connect_proto_goTypes,
		DependencyIndexes: file_redpanda_api_console_v1alpha1_rp_connect_proto_depIdxs,
		EnumInfos:         file_redpanda_api_console_v1alpha1_rp_connect_proto_enumTypes,
		MessageInfos:      file_redpanda_api_console_v1alpha1_rp_connect_proto_msgTypes,
	}.Build()
	File_redpanda_api_console_v1alpha1_rp_connect_proto = out.File
	file_redpanda_api_console_v1alpha1_rp_connect_proto_rawDesc = nil
	file_redpanda_api_console_v1alpha1_rp_connect_proto_goTypes = nil
	file_redpanda_api_console_v1alpha1_rp_connect_proto_depIdxs = nil
}
