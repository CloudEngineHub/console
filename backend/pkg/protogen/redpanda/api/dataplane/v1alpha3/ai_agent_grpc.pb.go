// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: redpanda/api/dataplane/v1alpha3/ai_agent.proto

package dataplanev1alpha3

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AIAgentService_CreateAIAgent_FullMethodName = "/redpanda.api.dataplane.v1alpha3.AIAgentService/CreateAIAgent"
	AIAgentService_GetAIAgent_FullMethodName    = "/redpanda.api.dataplane.v1alpha3.AIAgentService/GetAIAgent"
	AIAgentService_ListAIAgents_FullMethodName  = "/redpanda.api.dataplane.v1alpha3.AIAgentService/ListAIAgents"
	AIAgentService_UpdateAIAgent_FullMethodName = "/redpanda.api.dataplane.v1alpha3.AIAgentService/UpdateAIAgent"
	AIAgentService_DeleteAIAgent_FullMethodName = "/redpanda.api.dataplane.v1alpha3.AIAgentService/DeleteAIAgent"
	AIAgentService_StopAIAgent_FullMethodName   = "/redpanda.api.dataplane.v1alpha3.AIAgentService/StopAIAgent"
	AIAgentService_StartAIAgent_FullMethodName  = "/redpanda.api.dataplane.v1alpha3.AIAgentService/StartAIAgent"
)

// AIAgentServiceClient is the client API for AIAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AIAgentService is the service for AI Agents.
// It exposes the API for creating and managing AI agents and their configurations.
type AIAgentServiceClient interface {
	// CreateAIAgent creates an AI Agent in the Redpanda cluster.
	CreateAIAgent(ctx context.Context, in *CreateAIAgentRequest, opts ...grpc.CallOption) (*CreateAIAgentResponse, error)
	// GetAIAgent gets a specific AI Agent.
	GetAIAgent(ctx context.Context, in *GetAIAgentRequest, opts ...grpc.CallOption) (*GetAIAgentResponse, error)
	// ListAIAgents implements the list AI agents method which lists the AI agents
	// in the Redpanda cluster.
	ListAIAgents(ctx context.Context, in *ListAIAgentsRequest, opts ...grpc.CallOption) (*ListAIAgentsResponse, error)
	// UpdateAIAgent updates a specific AI agent configuration.
	UpdateAIAgent(ctx context.Context, in *UpdateAIAgentRequest, opts ...grpc.CallOption) (*UpdateAIAgentResponse, error)
	// DeleteAIAgent deletes a specific AI agent.
	DeleteAIAgent(ctx context.Context, in *DeleteAIAgentRequest, opts ...grpc.CallOption) (*DeleteAIAgentResponse, error)
	// StopAIAgent stops a specific AI agent.
	StopAIAgent(ctx context.Context, in *StopAIAgentRequest, opts ...grpc.CallOption) (*StopAIAgentResponse, error)
	// StartAIAgent starts a specific AI agent that has been previously stopped.
	StartAIAgent(ctx context.Context, in *StartAIAgentRequest, opts ...grpc.CallOption) (*StartAIAgentResponse, error)
}

type aIAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIAgentServiceClient(cc grpc.ClientConnInterface) AIAgentServiceClient {
	return &aIAgentServiceClient{cc}
}

func (c *aIAgentServiceClient) CreateAIAgent(ctx context.Context, in *CreateAIAgentRequest, opts ...grpc.CallOption) (*CreateAIAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAIAgentResponse)
	err := c.cc.Invoke(ctx, AIAgentService_CreateAIAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIAgentServiceClient) GetAIAgent(ctx context.Context, in *GetAIAgentRequest, opts ...grpc.CallOption) (*GetAIAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAIAgentResponse)
	err := c.cc.Invoke(ctx, AIAgentService_GetAIAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIAgentServiceClient) ListAIAgents(ctx context.Context, in *ListAIAgentsRequest, opts ...grpc.CallOption) (*ListAIAgentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAIAgentsResponse)
	err := c.cc.Invoke(ctx, AIAgentService_ListAIAgents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIAgentServiceClient) UpdateAIAgent(ctx context.Context, in *UpdateAIAgentRequest, opts ...grpc.CallOption) (*UpdateAIAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAIAgentResponse)
	err := c.cc.Invoke(ctx, AIAgentService_UpdateAIAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIAgentServiceClient) DeleteAIAgent(ctx context.Context, in *DeleteAIAgentRequest, opts ...grpc.CallOption) (*DeleteAIAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAIAgentResponse)
	err := c.cc.Invoke(ctx, AIAgentService_DeleteAIAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIAgentServiceClient) StopAIAgent(ctx context.Context, in *StopAIAgentRequest, opts ...grpc.CallOption) (*StopAIAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopAIAgentResponse)
	err := c.cc.Invoke(ctx, AIAgentService_StopAIAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIAgentServiceClient) StartAIAgent(ctx context.Context, in *StartAIAgentRequest, opts ...grpc.CallOption) (*StartAIAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartAIAgentResponse)
	err := c.cc.Invoke(ctx, AIAgentService_StartAIAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIAgentServiceServer is the server API for AIAgentService service.
// All implementations must embed UnimplementedAIAgentServiceServer
// for forward compatibility.
//
// AIAgentService is the service for AI Agents.
// It exposes the API for creating and managing AI agents and their configurations.
type AIAgentServiceServer interface {
	// CreateAIAgent creates an AI Agent in the Redpanda cluster.
	CreateAIAgent(context.Context, *CreateAIAgentRequest) (*CreateAIAgentResponse, error)
	// GetAIAgent gets a specific AI Agent.
	GetAIAgent(context.Context, *GetAIAgentRequest) (*GetAIAgentResponse, error)
	// ListAIAgents implements the list AI agents method which lists the AI agents
	// in the Redpanda cluster.
	ListAIAgents(context.Context, *ListAIAgentsRequest) (*ListAIAgentsResponse, error)
	// UpdateAIAgent updates a specific AI agent configuration.
	UpdateAIAgent(context.Context, *UpdateAIAgentRequest) (*UpdateAIAgentResponse, error)
	// DeleteAIAgent deletes a specific AI agent.
	DeleteAIAgent(context.Context, *DeleteAIAgentRequest) (*DeleteAIAgentResponse, error)
	// StopAIAgent stops a specific AI agent.
	StopAIAgent(context.Context, *StopAIAgentRequest) (*StopAIAgentResponse, error)
	// StartAIAgent starts a specific AI agent that has been previously stopped.
	StartAIAgent(context.Context, *StartAIAgentRequest) (*StartAIAgentResponse, error)
	mustEmbedUnimplementedAIAgentServiceServer()
}

// UnimplementedAIAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIAgentServiceServer struct{}

func (UnimplementedAIAgentServiceServer) CreateAIAgent(context.Context, *CreateAIAgentRequest) (*CreateAIAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAIAgent not implemented")
}
func (UnimplementedAIAgentServiceServer) GetAIAgent(context.Context, *GetAIAgentRequest) (*GetAIAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAIAgent not implemented")
}
func (UnimplementedAIAgentServiceServer) ListAIAgents(context.Context, *ListAIAgentsRequest) (*ListAIAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAIAgents not implemented")
}
func (UnimplementedAIAgentServiceServer) UpdateAIAgent(context.Context, *UpdateAIAgentRequest) (*UpdateAIAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAIAgent not implemented")
}
func (UnimplementedAIAgentServiceServer) DeleteAIAgent(context.Context, *DeleteAIAgentRequest) (*DeleteAIAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAIAgent not implemented")
}
func (UnimplementedAIAgentServiceServer) StopAIAgent(context.Context, *StopAIAgentRequest) (*StopAIAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAIAgent not implemented")
}
func (UnimplementedAIAgentServiceServer) StartAIAgent(context.Context, *StartAIAgentRequest) (*StartAIAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAIAgent not implemented")
}
func (UnimplementedAIAgentServiceServer) mustEmbedUnimplementedAIAgentServiceServer() {}
func (UnimplementedAIAgentServiceServer) testEmbeddedByValue()                        {}

// UnsafeAIAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIAgentServiceServer will
// result in compilation errors.
type UnsafeAIAgentServiceServer interface {
	mustEmbedUnimplementedAIAgentServiceServer()
}

func RegisterAIAgentServiceServer(s grpc.ServiceRegistrar, srv AIAgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIAgentService_ServiceDesc, srv)
}

func _AIAgentService_CreateAIAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAIAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAgentServiceServer).CreateAIAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAgentService_CreateAIAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAgentServiceServer).CreateAIAgent(ctx, req.(*CreateAIAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIAgentService_GetAIAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAIAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAgentServiceServer).GetAIAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAgentService_GetAIAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAgentServiceServer).GetAIAgent(ctx, req.(*GetAIAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIAgentService_ListAIAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAIAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAgentServiceServer).ListAIAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAgentService_ListAIAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAgentServiceServer).ListAIAgents(ctx, req.(*ListAIAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIAgentService_UpdateAIAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAIAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAgentServiceServer).UpdateAIAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAgentService_UpdateAIAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAgentServiceServer).UpdateAIAgent(ctx, req.(*UpdateAIAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIAgentService_DeleteAIAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAIAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAgentServiceServer).DeleteAIAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAgentService_DeleteAIAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAgentServiceServer).DeleteAIAgent(ctx, req.(*DeleteAIAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIAgentService_StopAIAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAIAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAgentServiceServer).StopAIAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAgentService_StopAIAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAgentServiceServer).StopAIAgent(ctx, req.(*StopAIAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIAgentService_StartAIAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAIAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAgentServiceServer).StartAIAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAgentService_StartAIAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAgentServiceServer).StartAIAgent(ctx, req.(*StartAIAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIAgentService_ServiceDesc is the grpc.ServiceDesc for AIAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redpanda.api.dataplane.v1alpha3.AIAgentService",
	HandlerType: (*AIAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAIAgent",
			Handler:    _AIAgentService_CreateAIAgent_Handler,
		},
		{
			MethodName: "GetAIAgent",
			Handler:    _AIAgentService_GetAIAgent_Handler,
		},
		{
			MethodName: "ListAIAgents",
			Handler:    _AIAgentService_ListAIAgents_Handler,
		},
		{
			MethodName: "UpdateAIAgent",
			Handler:    _AIAgentService_UpdateAIAgent_Handler,
		},
		{
			MethodName: "DeleteAIAgent",
			Handler:    _AIAgentService_DeleteAIAgent_Handler,
		},
		{
			MethodName: "StopAIAgent",
			Handler:    _AIAgentService_StopAIAgent_Handler,
		},
		{
			MethodName: "StartAIAgent",
			Handler:    _AIAgentService_StartAIAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redpanda/api/dataplane/v1alpha3/ai_agent.proto",
}
