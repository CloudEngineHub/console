// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1alpha3/ai_agent.proto

package dataplanev1alpha3connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha3 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1alpha3"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AIAgentServiceName is the fully-qualified name of the AIAgentService service.
	AIAgentServiceName = "redpanda.api.dataplane.v1alpha3.AIAgentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AIAgentServiceCreateAIAgentProcedure is the fully-qualified name of the AIAgentService's
	// CreateAIAgent RPC.
	AIAgentServiceCreateAIAgentProcedure = "/redpanda.api.dataplane.v1alpha3.AIAgentService/CreateAIAgent"
	// AIAgentServiceGetAIAgentProcedure is the fully-qualified name of the AIAgentService's GetAIAgent
	// RPC.
	AIAgentServiceGetAIAgentProcedure = "/redpanda.api.dataplane.v1alpha3.AIAgentService/GetAIAgent"
	// AIAgentServiceListAIAgentsProcedure is the fully-qualified name of the AIAgentService's
	// ListAIAgents RPC.
	AIAgentServiceListAIAgentsProcedure = "/redpanda.api.dataplane.v1alpha3.AIAgentService/ListAIAgents"
	// AIAgentServiceUpdateAIAgentProcedure is the fully-qualified name of the AIAgentService's
	// UpdateAIAgent RPC.
	AIAgentServiceUpdateAIAgentProcedure = "/redpanda.api.dataplane.v1alpha3.AIAgentService/UpdateAIAgent"
	// AIAgentServiceDeleteAIAgentProcedure is the fully-qualified name of the AIAgentService's
	// DeleteAIAgent RPC.
	AIAgentServiceDeleteAIAgentProcedure = "/redpanda.api.dataplane.v1alpha3.AIAgentService/DeleteAIAgent"
	// AIAgentServiceStopAIAgentProcedure is the fully-qualified name of the AIAgentService's
	// StopAIAgent RPC.
	AIAgentServiceStopAIAgentProcedure = "/redpanda.api.dataplane.v1alpha3.AIAgentService/StopAIAgent"
	// AIAgentServiceStartAIAgentProcedure is the fully-qualified name of the AIAgentService's
	// StartAIAgent RPC.
	AIAgentServiceStartAIAgentProcedure = "/redpanda.api.dataplane.v1alpha3.AIAgentService/StartAIAgent"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	aIAgentServiceServiceDescriptor             = v1alpha3.File_redpanda_api_dataplane_v1alpha3_ai_agent_proto.Services().ByName("AIAgentService")
	aIAgentServiceCreateAIAgentMethodDescriptor = aIAgentServiceServiceDescriptor.Methods().ByName("CreateAIAgent")
	aIAgentServiceGetAIAgentMethodDescriptor    = aIAgentServiceServiceDescriptor.Methods().ByName("GetAIAgent")
	aIAgentServiceListAIAgentsMethodDescriptor  = aIAgentServiceServiceDescriptor.Methods().ByName("ListAIAgents")
	aIAgentServiceUpdateAIAgentMethodDescriptor = aIAgentServiceServiceDescriptor.Methods().ByName("UpdateAIAgent")
	aIAgentServiceDeleteAIAgentMethodDescriptor = aIAgentServiceServiceDescriptor.Methods().ByName("DeleteAIAgent")
	aIAgentServiceStopAIAgentMethodDescriptor   = aIAgentServiceServiceDescriptor.Methods().ByName("StopAIAgent")
	aIAgentServiceStartAIAgentMethodDescriptor  = aIAgentServiceServiceDescriptor.Methods().ByName("StartAIAgent")
)

// AIAgentServiceClient is a client for the redpanda.api.dataplane.v1alpha3.AIAgentService service.
type AIAgentServiceClient interface {
	// CreateAIAgent creates an AI Agent in the Redpanda cluster.
	CreateAIAgent(context.Context, *connect.Request[v1alpha3.CreateAIAgentRequest]) (*connect.Response[v1alpha3.CreateAIAgentResponse], error)
	// GetAIAgent gets a specific AI Agent.
	GetAIAgent(context.Context, *connect.Request[v1alpha3.GetAIAgentRequest]) (*connect.Response[v1alpha3.GetAIAgentResponse], error)
	// ListAIAgents implements the list AI agents method which lists the AI agents
	// in the Redpanda cluster.
	ListAIAgents(context.Context, *connect.Request[v1alpha3.ListAIAgentsRequest]) (*connect.Response[v1alpha3.ListAIAgentsResponse], error)
	// UpdateAIAgent updates a specific AI agent configuration.
	UpdateAIAgent(context.Context, *connect.Request[v1alpha3.UpdateAIAgentRequest]) (*connect.Response[v1alpha3.UpdateAIAgentResponse], error)
	// DeleteAIAgent deletes a specific AI agent.
	DeleteAIAgent(context.Context, *connect.Request[v1alpha3.DeleteAIAgentRequest]) (*connect.Response[v1alpha3.DeleteAIAgentResponse], error)
	// StopAIAgent stops a specific AI agent.
	StopAIAgent(context.Context, *connect.Request[v1alpha3.StopAIAgentRequest]) (*connect.Response[v1alpha3.StopAIAgentResponse], error)
	// StartAIAgent starts a specific AI agent that has been previously stopped.
	StartAIAgent(context.Context, *connect.Request[v1alpha3.StartAIAgentRequest]) (*connect.Response[v1alpha3.StartAIAgentResponse], error)
}

// NewAIAgentServiceClient constructs a client for the
// redpanda.api.dataplane.v1alpha3.AIAgentService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAIAgentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AIAgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aIAgentServiceClient{
		createAIAgent: connect.NewClient[v1alpha3.CreateAIAgentRequest, v1alpha3.CreateAIAgentResponse](
			httpClient,
			baseURL+AIAgentServiceCreateAIAgentProcedure,
			connect.WithSchema(aIAgentServiceCreateAIAgentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAIAgent: connect.NewClient[v1alpha3.GetAIAgentRequest, v1alpha3.GetAIAgentResponse](
			httpClient,
			baseURL+AIAgentServiceGetAIAgentProcedure,
			connect.WithSchema(aIAgentServiceGetAIAgentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAIAgents: connect.NewClient[v1alpha3.ListAIAgentsRequest, v1alpha3.ListAIAgentsResponse](
			httpClient,
			baseURL+AIAgentServiceListAIAgentsProcedure,
			connect.WithSchema(aIAgentServiceListAIAgentsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAIAgent: connect.NewClient[v1alpha3.UpdateAIAgentRequest, v1alpha3.UpdateAIAgentResponse](
			httpClient,
			baseURL+AIAgentServiceUpdateAIAgentProcedure,
			connect.WithSchema(aIAgentServiceUpdateAIAgentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAIAgent: connect.NewClient[v1alpha3.DeleteAIAgentRequest, v1alpha3.DeleteAIAgentResponse](
			httpClient,
			baseURL+AIAgentServiceDeleteAIAgentProcedure,
			connect.WithSchema(aIAgentServiceDeleteAIAgentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stopAIAgent: connect.NewClient[v1alpha3.StopAIAgentRequest, v1alpha3.StopAIAgentResponse](
			httpClient,
			baseURL+AIAgentServiceStopAIAgentProcedure,
			connect.WithSchema(aIAgentServiceStopAIAgentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		startAIAgent: connect.NewClient[v1alpha3.StartAIAgentRequest, v1alpha3.StartAIAgentResponse](
			httpClient,
			baseURL+AIAgentServiceStartAIAgentProcedure,
			connect.WithSchema(aIAgentServiceStartAIAgentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// aIAgentServiceClient implements AIAgentServiceClient.
type aIAgentServiceClient struct {
	createAIAgent *connect.Client[v1alpha3.CreateAIAgentRequest, v1alpha3.CreateAIAgentResponse]
	getAIAgent    *connect.Client[v1alpha3.GetAIAgentRequest, v1alpha3.GetAIAgentResponse]
	listAIAgents  *connect.Client[v1alpha3.ListAIAgentsRequest, v1alpha3.ListAIAgentsResponse]
	updateAIAgent *connect.Client[v1alpha3.UpdateAIAgentRequest, v1alpha3.UpdateAIAgentResponse]
	deleteAIAgent *connect.Client[v1alpha3.DeleteAIAgentRequest, v1alpha3.DeleteAIAgentResponse]
	stopAIAgent   *connect.Client[v1alpha3.StopAIAgentRequest, v1alpha3.StopAIAgentResponse]
	startAIAgent  *connect.Client[v1alpha3.StartAIAgentRequest, v1alpha3.StartAIAgentResponse]
}

// CreateAIAgent calls redpanda.api.dataplane.v1alpha3.AIAgentService.CreateAIAgent.
func (c *aIAgentServiceClient) CreateAIAgent(ctx context.Context, req *connect.Request[v1alpha3.CreateAIAgentRequest]) (*connect.Response[v1alpha3.CreateAIAgentResponse], error) {
	return c.createAIAgent.CallUnary(ctx, req)
}

// GetAIAgent calls redpanda.api.dataplane.v1alpha3.AIAgentService.GetAIAgent.
func (c *aIAgentServiceClient) GetAIAgent(ctx context.Context, req *connect.Request[v1alpha3.GetAIAgentRequest]) (*connect.Response[v1alpha3.GetAIAgentResponse], error) {
	return c.getAIAgent.CallUnary(ctx, req)
}

// ListAIAgents calls redpanda.api.dataplane.v1alpha3.AIAgentService.ListAIAgents.
func (c *aIAgentServiceClient) ListAIAgents(ctx context.Context, req *connect.Request[v1alpha3.ListAIAgentsRequest]) (*connect.Response[v1alpha3.ListAIAgentsResponse], error) {
	return c.listAIAgents.CallUnary(ctx, req)
}

// UpdateAIAgent calls redpanda.api.dataplane.v1alpha3.AIAgentService.UpdateAIAgent.
func (c *aIAgentServiceClient) UpdateAIAgent(ctx context.Context, req *connect.Request[v1alpha3.UpdateAIAgentRequest]) (*connect.Response[v1alpha3.UpdateAIAgentResponse], error) {
	return c.updateAIAgent.CallUnary(ctx, req)
}

// DeleteAIAgent calls redpanda.api.dataplane.v1alpha3.AIAgentService.DeleteAIAgent.
func (c *aIAgentServiceClient) DeleteAIAgent(ctx context.Context, req *connect.Request[v1alpha3.DeleteAIAgentRequest]) (*connect.Response[v1alpha3.DeleteAIAgentResponse], error) {
	return c.deleteAIAgent.CallUnary(ctx, req)
}

// StopAIAgent calls redpanda.api.dataplane.v1alpha3.AIAgentService.StopAIAgent.
func (c *aIAgentServiceClient) StopAIAgent(ctx context.Context, req *connect.Request[v1alpha3.StopAIAgentRequest]) (*connect.Response[v1alpha3.StopAIAgentResponse], error) {
	return c.stopAIAgent.CallUnary(ctx, req)
}

// StartAIAgent calls redpanda.api.dataplane.v1alpha3.AIAgentService.StartAIAgent.
func (c *aIAgentServiceClient) StartAIAgent(ctx context.Context, req *connect.Request[v1alpha3.StartAIAgentRequest]) (*connect.Response[v1alpha3.StartAIAgentResponse], error) {
	return c.startAIAgent.CallUnary(ctx, req)
}

// AIAgentServiceHandler is an implementation of the redpanda.api.dataplane.v1alpha3.AIAgentService
// service.
type AIAgentServiceHandler interface {
	// CreateAIAgent creates an AI Agent in the Redpanda cluster.
	CreateAIAgent(context.Context, *connect.Request[v1alpha3.CreateAIAgentRequest]) (*connect.Response[v1alpha3.CreateAIAgentResponse], error)
	// GetAIAgent gets a specific AI Agent.
	GetAIAgent(context.Context, *connect.Request[v1alpha3.GetAIAgentRequest]) (*connect.Response[v1alpha3.GetAIAgentResponse], error)
	// ListAIAgents implements the list AI agents method which lists the AI agents
	// in the Redpanda cluster.
	ListAIAgents(context.Context, *connect.Request[v1alpha3.ListAIAgentsRequest]) (*connect.Response[v1alpha3.ListAIAgentsResponse], error)
	// UpdateAIAgent updates a specific AI agent configuration.
	UpdateAIAgent(context.Context, *connect.Request[v1alpha3.UpdateAIAgentRequest]) (*connect.Response[v1alpha3.UpdateAIAgentResponse], error)
	// DeleteAIAgent deletes a specific AI agent.
	DeleteAIAgent(context.Context, *connect.Request[v1alpha3.DeleteAIAgentRequest]) (*connect.Response[v1alpha3.DeleteAIAgentResponse], error)
	// StopAIAgent stops a specific AI agent.
	StopAIAgent(context.Context, *connect.Request[v1alpha3.StopAIAgentRequest]) (*connect.Response[v1alpha3.StopAIAgentResponse], error)
	// StartAIAgent starts a specific AI agent that has been previously stopped.
	StartAIAgent(context.Context, *connect.Request[v1alpha3.StartAIAgentRequest]) (*connect.Response[v1alpha3.StartAIAgentResponse], error)
}

// NewAIAgentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAIAgentServiceHandler(svc AIAgentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aIAgentServiceCreateAIAgentHandler := connect.NewUnaryHandler(
		AIAgentServiceCreateAIAgentProcedure,
		svc.CreateAIAgent,
		connect.WithSchema(aIAgentServiceCreateAIAgentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aIAgentServiceGetAIAgentHandler := connect.NewUnaryHandler(
		AIAgentServiceGetAIAgentProcedure,
		svc.GetAIAgent,
		connect.WithSchema(aIAgentServiceGetAIAgentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aIAgentServiceListAIAgentsHandler := connect.NewUnaryHandler(
		AIAgentServiceListAIAgentsProcedure,
		svc.ListAIAgents,
		connect.WithSchema(aIAgentServiceListAIAgentsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aIAgentServiceUpdateAIAgentHandler := connect.NewUnaryHandler(
		AIAgentServiceUpdateAIAgentProcedure,
		svc.UpdateAIAgent,
		connect.WithSchema(aIAgentServiceUpdateAIAgentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aIAgentServiceDeleteAIAgentHandler := connect.NewUnaryHandler(
		AIAgentServiceDeleteAIAgentProcedure,
		svc.DeleteAIAgent,
		connect.WithSchema(aIAgentServiceDeleteAIAgentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aIAgentServiceStopAIAgentHandler := connect.NewUnaryHandler(
		AIAgentServiceStopAIAgentProcedure,
		svc.StopAIAgent,
		connect.WithSchema(aIAgentServiceStopAIAgentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aIAgentServiceStartAIAgentHandler := connect.NewUnaryHandler(
		AIAgentServiceStartAIAgentProcedure,
		svc.StartAIAgent,
		connect.WithSchema(aIAgentServiceStartAIAgentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.dataplane.v1alpha3.AIAgentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AIAgentServiceCreateAIAgentProcedure:
			aIAgentServiceCreateAIAgentHandler.ServeHTTP(w, r)
		case AIAgentServiceGetAIAgentProcedure:
			aIAgentServiceGetAIAgentHandler.ServeHTTP(w, r)
		case AIAgentServiceListAIAgentsProcedure:
			aIAgentServiceListAIAgentsHandler.ServeHTTP(w, r)
		case AIAgentServiceUpdateAIAgentProcedure:
			aIAgentServiceUpdateAIAgentHandler.ServeHTTP(w, r)
		case AIAgentServiceDeleteAIAgentProcedure:
			aIAgentServiceDeleteAIAgentHandler.ServeHTTP(w, r)
		case AIAgentServiceStopAIAgentProcedure:
			aIAgentServiceStopAIAgentHandler.ServeHTTP(w, r)
		case AIAgentServiceStartAIAgentProcedure:
			aIAgentServiceStartAIAgentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAIAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAIAgentServiceHandler struct{}

func (UnimplementedAIAgentServiceHandler) CreateAIAgent(context.Context, *connect.Request[v1alpha3.CreateAIAgentRequest]) (*connect.Response[v1alpha3.CreateAIAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha3.AIAgentService.CreateAIAgent is not implemented"))
}

func (UnimplementedAIAgentServiceHandler) GetAIAgent(context.Context, *connect.Request[v1alpha3.GetAIAgentRequest]) (*connect.Response[v1alpha3.GetAIAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha3.AIAgentService.GetAIAgent is not implemented"))
}

func (UnimplementedAIAgentServiceHandler) ListAIAgents(context.Context, *connect.Request[v1alpha3.ListAIAgentsRequest]) (*connect.Response[v1alpha3.ListAIAgentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha3.AIAgentService.ListAIAgents is not implemented"))
}

func (UnimplementedAIAgentServiceHandler) UpdateAIAgent(context.Context, *connect.Request[v1alpha3.UpdateAIAgentRequest]) (*connect.Response[v1alpha3.UpdateAIAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha3.AIAgentService.UpdateAIAgent is not implemented"))
}

func (UnimplementedAIAgentServiceHandler) DeleteAIAgent(context.Context, *connect.Request[v1alpha3.DeleteAIAgentRequest]) (*connect.Response[v1alpha3.DeleteAIAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha3.AIAgentService.DeleteAIAgent is not implemented"))
}

func (UnimplementedAIAgentServiceHandler) StopAIAgent(context.Context, *connect.Request[v1alpha3.StopAIAgentRequest]) (*connect.Response[v1alpha3.StopAIAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha3.AIAgentService.StopAIAgent is not implemented"))
}

func (UnimplementedAIAgentServiceHandler) StartAIAgent(context.Context, *connect.Request[v1alpha3.StartAIAgentRequest]) (*connect.Response[v1alpha3.StartAIAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha3.AIAgentService.StartAIAgent is not implemented"))
}
