// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1alpha3/ai_agent.proto

package dataplanev1alpha3connect

import (
	context "context"
	fmt "fmt"
	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	v1alpha3 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1alpha3"
	connect_gateway "go.vallahaye.net/connect-gateway"
)

// AIAgentServiceGatewayServer implements the gRPC server API for the AIAgentService service.
type AIAgentServiceGatewayServer struct {
	v1alpha3.UnimplementedAIAgentServiceServer
	createAIAgent connect_gateway.UnaryHandler[v1alpha3.CreateAIAgentRequest, v1alpha3.CreateAIAgentResponse]
	getAIAgent    connect_gateway.UnaryHandler[v1alpha3.GetAIAgentRequest, v1alpha3.GetAIAgentResponse]
	listAIAgents  connect_gateway.UnaryHandler[v1alpha3.ListAIAgentsRequest, v1alpha3.ListAIAgentsResponse]
	updateAIAgent connect_gateway.UnaryHandler[v1alpha3.UpdateAIAgentRequest, v1alpha3.UpdateAIAgentResponse]
	deleteAIAgent connect_gateway.UnaryHandler[v1alpha3.DeleteAIAgentRequest, v1alpha3.DeleteAIAgentResponse]
	stopAIAgent   connect_gateway.UnaryHandler[v1alpha3.StopAIAgentRequest, v1alpha3.StopAIAgentResponse]
	startAIAgent  connect_gateway.UnaryHandler[v1alpha3.StartAIAgentRequest, v1alpha3.StartAIAgentResponse]
}

// NewAIAgentServiceGatewayServer constructs a Connect-Gateway gRPC server for the AIAgentService
// service.
func NewAIAgentServiceGatewayServer(svc AIAgentServiceHandler, opts ...connect_gateway.HandlerOption) *AIAgentServiceGatewayServer {
	return &AIAgentServiceGatewayServer{
		createAIAgent: connect_gateway.NewUnaryHandler(AIAgentServiceCreateAIAgentProcedure, svc.CreateAIAgent, opts...),
		getAIAgent:    connect_gateway.NewUnaryHandler(AIAgentServiceGetAIAgentProcedure, svc.GetAIAgent, opts...),
		listAIAgents:  connect_gateway.NewUnaryHandler(AIAgentServiceListAIAgentsProcedure, svc.ListAIAgents, opts...),
		updateAIAgent: connect_gateway.NewUnaryHandler(AIAgentServiceUpdateAIAgentProcedure, svc.UpdateAIAgent, opts...),
		deleteAIAgent: connect_gateway.NewUnaryHandler(AIAgentServiceDeleteAIAgentProcedure, svc.DeleteAIAgent, opts...),
		stopAIAgent:   connect_gateway.NewUnaryHandler(AIAgentServiceStopAIAgentProcedure, svc.StopAIAgent, opts...),
		startAIAgent:  connect_gateway.NewUnaryHandler(AIAgentServiceStartAIAgentProcedure, svc.StartAIAgent, opts...),
	}
}

func (s *AIAgentServiceGatewayServer) CreateAIAgent(ctx context.Context, req *v1alpha3.CreateAIAgentRequest) (*v1alpha3.CreateAIAgentResponse, error) {
	return s.createAIAgent(ctx, req)
}

func (s *AIAgentServiceGatewayServer) GetAIAgent(ctx context.Context, req *v1alpha3.GetAIAgentRequest) (*v1alpha3.GetAIAgentResponse, error) {
	return s.getAIAgent(ctx, req)
}

func (s *AIAgentServiceGatewayServer) ListAIAgents(ctx context.Context, req *v1alpha3.ListAIAgentsRequest) (*v1alpha3.ListAIAgentsResponse, error) {
	return s.listAIAgents(ctx, req)
}

func (s *AIAgentServiceGatewayServer) UpdateAIAgent(ctx context.Context, req *v1alpha3.UpdateAIAgentRequest) (*v1alpha3.UpdateAIAgentResponse, error) {
	return s.updateAIAgent(ctx, req)
}

func (s *AIAgentServiceGatewayServer) DeleteAIAgent(ctx context.Context, req *v1alpha3.DeleteAIAgentRequest) (*v1alpha3.DeleteAIAgentResponse, error) {
	return s.deleteAIAgent(ctx, req)
}

func (s *AIAgentServiceGatewayServer) StopAIAgent(ctx context.Context, req *v1alpha3.StopAIAgentRequest) (*v1alpha3.StopAIAgentResponse, error) {
	return s.stopAIAgent(ctx, req)
}

func (s *AIAgentServiceGatewayServer) StartAIAgent(ctx context.Context, req *v1alpha3.StartAIAgentRequest) (*v1alpha3.StartAIAgentResponse, error) {
	return s.startAIAgent(ctx, req)
}

// RegisterAIAgentServiceHandlerGatewayServer registers the Connect handlers for the AIAgentService
// "svc" to "mux".
func RegisterAIAgentServiceHandlerGatewayServer(mux *runtime.ServeMux, svc AIAgentServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1alpha3.RegisterAIAgentServiceHandlerServer(context.TODO(), mux, NewAIAgentServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
