// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: redpanda/api/gatekeeper/v1alpha1/gatekeeper.proto

package gatekeeperv1alpha1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SignUpService_SignUp_FullMethodName                = "/redpanda.api.gatekeeper.v1alpha1.SignUpService/SignUp"
	SignUpService_SignUpFromMarketplace_FullMethodName = "/redpanda.api.gatekeeper.v1alpha1.SignUpService/SignUpFromMarketplace"
	SignUpService_SendVerifyEmail_FullMethodName       = "/redpanda.api.gatekeeper.v1alpha1.SignUpService/SendVerifyEmail"
	SignUpService_ValidateEntitlement_FullMethodName   = "/redpanda.api.gatekeeper.v1alpha1.SignUpService/ValidateEntitlement"
)

// SignUpServiceClient is the client API for SignUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignUpServiceClient interface {
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	SignUpFromMarketplace(ctx context.Context, in *SignUpFromMarketplaceRequest, opts ...grpc.CallOption) (*SignUpFromMarketplaceResponse, error)
	SendVerifyEmail(ctx context.Context, in *SendVerifyEmailRequest, opts ...grpc.CallOption) (*SendVerifyEmailResponse, error)
	ValidateEntitlement(ctx context.Context, in *ValidateEntitlementRequest, opts ...grpc.CallOption) (*ValidateEntitlementResponse, error)
}

type signUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignUpServiceClient(cc grpc.ClientConnInterface) SignUpServiceClient {
	return &signUpServiceClient{cc}
}

func (c *signUpServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, SignUpService_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signUpServiceClient) SignUpFromMarketplace(ctx context.Context, in *SignUpFromMarketplaceRequest, opts ...grpc.CallOption) (*SignUpFromMarketplaceResponse, error) {
	out := new(SignUpFromMarketplaceResponse)
	err := c.cc.Invoke(ctx, SignUpService_SignUpFromMarketplace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signUpServiceClient) SendVerifyEmail(ctx context.Context, in *SendVerifyEmailRequest, opts ...grpc.CallOption) (*SendVerifyEmailResponse, error) {
	out := new(SendVerifyEmailResponse)
	err := c.cc.Invoke(ctx, SignUpService_SendVerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signUpServiceClient) ValidateEntitlement(ctx context.Context, in *ValidateEntitlementRequest, opts ...grpc.CallOption) (*ValidateEntitlementResponse, error) {
	out := new(ValidateEntitlementResponse)
	err := c.cc.Invoke(ctx, SignUpService_ValidateEntitlement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignUpServiceServer is the server API for SignUpService service.
// All implementations must embed UnimplementedSignUpServiceServer
// for forward compatibility
type SignUpServiceServer interface {
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	SignUpFromMarketplace(context.Context, *SignUpFromMarketplaceRequest) (*SignUpFromMarketplaceResponse, error)
	SendVerifyEmail(context.Context, *SendVerifyEmailRequest) (*SendVerifyEmailResponse, error)
	ValidateEntitlement(context.Context, *ValidateEntitlementRequest) (*ValidateEntitlementResponse, error)
	mustEmbedUnimplementedSignUpServiceServer()
}

// UnimplementedSignUpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSignUpServiceServer struct {
}

func (UnimplementedSignUpServiceServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedSignUpServiceServer) SignUpFromMarketplace(context.Context, *SignUpFromMarketplaceRequest) (*SignUpFromMarketplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpFromMarketplace not implemented")
}
func (UnimplementedSignUpServiceServer) SendVerifyEmail(context.Context, *SendVerifyEmailRequest) (*SendVerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerifyEmail not implemented")
}
func (UnimplementedSignUpServiceServer) ValidateEntitlement(context.Context, *ValidateEntitlementRequest) (*ValidateEntitlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateEntitlement not implemented")
}
func (UnimplementedSignUpServiceServer) mustEmbedUnimplementedSignUpServiceServer() {}

// UnsafeSignUpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignUpServiceServer will
// result in compilation errors.
type UnsafeSignUpServiceServer interface {
	mustEmbedUnimplementedSignUpServiceServer()
}

func RegisterSignUpServiceServer(s grpc.ServiceRegistrar, srv SignUpServiceServer) {
	s.RegisterService(&SignUpService_ServiceDesc, srv)
}

func _SignUpService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignUpServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignUpService_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignUpServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignUpService_SignUpFromMarketplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpFromMarketplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignUpServiceServer).SignUpFromMarketplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignUpService_SignUpFromMarketplace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignUpServiceServer).SignUpFromMarketplace(ctx, req.(*SignUpFromMarketplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignUpService_SendVerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignUpServiceServer).SendVerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignUpService_SendVerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignUpServiceServer).SendVerifyEmail(ctx, req.(*SendVerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignUpService_ValidateEntitlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateEntitlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignUpServiceServer).ValidateEntitlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignUpService_ValidateEntitlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignUpServiceServer).ValidateEntitlement(ctx, req.(*ValidateEntitlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SignUpService_ServiceDesc is the grpc.ServiceDesc for SignUpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignUpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redpanda.api.gatekeeper.v1alpha1.SignUpService",
	HandlerType: (*SignUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _SignUpService_SignUp_Handler,
		},
		{
			MethodName: "SignUpFromMarketplace",
			Handler:    _SignUpService_SignUpFromMarketplace_Handler,
		},
		{
			MethodName: "SendVerifyEmail",
			Handler:    _SignUpService_SendVerifyEmail_Handler,
		},
		{
			MethodName: "ValidateEntitlement",
			Handler:    _SignUpService_ValidateEntitlement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redpanda/api/gatekeeper/v1alpha1/gatekeeper.proto",
}
