// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/gatekeeper/v1alpha1/enterprise.proto

package gatekeeperv1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1alpha1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/gatekeeper/v1alpha1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EnterpriseServiceName is the fully-qualified name of the EnterpriseService service.
	EnterpriseServiceName = "redpanda.api.gatekeeper.v1alpha1.EnterpriseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EnterpriseServiceLicenseSignupProcedure is the fully-qualified name of the EnterpriseService's
	// LicenseSignup RPC.
	EnterpriseServiceLicenseSignupProcedure = "/redpanda.api.gatekeeper.v1alpha1.EnterpriseService/LicenseSignup"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	enterpriseServiceServiceDescriptor             = v1alpha1.File_redpanda_api_gatekeeper_v1alpha1_enterprise_proto.Services().ByName("EnterpriseService")
	enterpriseServiceLicenseSignupMethodDescriptor = enterpriseServiceServiceDescriptor.Methods().ByName("LicenseSignup")
)

// EnterpriseServiceClient is a client for the redpanda.api.gatekeeper.v1alpha1.EnterpriseService
// service.
type EnterpriseServiceClient interface {
	LicenseSignup(context.Context, *connect.Request[v1alpha1.LicenseSignupRequest]) (*connect.Response[v1alpha1.LicenseSignupResponse], error)
}

// NewEnterpriseServiceClient constructs a client for the
// redpanda.api.gatekeeper.v1alpha1.EnterpriseService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnterpriseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EnterpriseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &enterpriseServiceClient{
		licenseSignup: connect.NewClient[v1alpha1.LicenseSignupRequest, v1alpha1.LicenseSignupResponse](
			httpClient,
			baseURL+EnterpriseServiceLicenseSignupProcedure,
			connect.WithSchema(enterpriseServiceLicenseSignupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// enterpriseServiceClient implements EnterpriseServiceClient.
type enterpriseServiceClient struct {
	licenseSignup *connect.Client[v1alpha1.LicenseSignupRequest, v1alpha1.LicenseSignupResponse]
}

// LicenseSignup calls redpanda.api.gatekeeper.v1alpha1.EnterpriseService.LicenseSignup.
func (c *enterpriseServiceClient) LicenseSignup(ctx context.Context, req *connect.Request[v1alpha1.LicenseSignupRequest]) (*connect.Response[v1alpha1.LicenseSignupResponse], error) {
	return c.licenseSignup.CallUnary(ctx, req)
}

// EnterpriseServiceHandler is an implementation of the
// redpanda.api.gatekeeper.v1alpha1.EnterpriseService service.
type EnterpriseServiceHandler interface {
	LicenseSignup(context.Context, *connect.Request[v1alpha1.LicenseSignupRequest]) (*connect.Response[v1alpha1.LicenseSignupResponse], error)
}

// NewEnterpriseServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnterpriseServiceHandler(svc EnterpriseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	enterpriseServiceLicenseSignupHandler := connect.NewUnaryHandler(
		EnterpriseServiceLicenseSignupProcedure,
		svc.LicenseSignup,
		connect.WithSchema(enterpriseServiceLicenseSignupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.gatekeeper.v1alpha1.EnterpriseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EnterpriseServiceLicenseSignupProcedure:
			enterpriseServiceLicenseSignupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEnterpriseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEnterpriseServiceHandler struct{}

func (UnimplementedEnterpriseServiceHandler) LicenseSignup(context.Context, *connect.Request[v1alpha1.LicenseSignupRequest]) (*connect.Response[v1alpha1.LicenseSignupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.gatekeeper.v1alpha1.EnterpriseService.LicenseSignup is not implemented"))
}
