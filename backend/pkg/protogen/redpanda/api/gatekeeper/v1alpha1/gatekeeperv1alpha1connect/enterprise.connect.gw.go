// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/gatekeeper/v1alpha1/enterprise.proto

package gatekeeperv1alpha1connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1alpha1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/gatekeeper/v1alpha1"
)

// EnterpriseServiceGatewayServer implements the gRPC server API for the EnterpriseService service.
type EnterpriseServiceGatewayServer struct {
	v1alpha1.UnimplementedEnterpriseServiceServer
	licenseSignup connect_gateway.UnaryHandler[v1alpha1.LicenseSignupRequest, v1alpha1.LicenseSignupResponse]
}

// NewEnterpriseServiceGatewayServer constructs a Connect-Gateway gRPC server for the
// EnterpriseService service.
func NewEnterpriseServiceGatewayServer(svc EnterpriseServiceHandler, opts ...connect_gateway.HandlerOption) *EnterpriseServiceGatewayServer {
	return &EnterpriseServiceGatewayServer{
		licenseSignup: connect_gateway.NewUnaryHandler(EnterpriseServiceLicenseSignupProcedure, svc.LicenseSignup, opts...),
	}
}

func (s *EnterpriseServiceGatewayServer) LicenseSignup(ctx context.Context, req *v1alpha1.LicenseSignupRequest) (*v1alpha1.LicenseSignupResponse, error) {
	return s.licenseSignup(ctx, req)
}

// RegisterEnterpriseServiceHandlerGatewayServer registers the Connect handlers for the
// EnterpriseService "svc" to "mux".
func RegisterEnterpriseServiceHandlerGatewayServer(mux *runtime.ServeMux, svc EnterpriseServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1alpha1.RegisterEnterpriseServiceHandlerServer(context.TODO(), mux, NewEnterpriseServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
