// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/gatekeeper/v1alpha1/gatekeeper.proto

package gatekeeperv1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1alpha1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/gatekeeper/v1alpha1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SignUpServiceName is the fully-qualified name of the SignUpService service.
	SignUpServiceName = "redpanda.api.gatekeeper.v1alpha1.SignUpService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SignUpServiceSignUpProcedure is the fully-qualified name of the SignUpService's SignUp RPC.
	SignUpServiceSignUpProcedure = "/redpanda.api.gatekeeper.v1alpha1.SignUpService/SignUp"
	// SignUpServiceSignUpFromMarketplaceProcedure is the fully-qualified name of the SignUpService's
	// SignUpFromMarketplace RPC.
	SignUpServiceSignUpFromMarketplaceProcedure = "/redpanda.api.gatekeeper.v1alpha1.SignUpService/SignUpFromMarketplace"
	// SignUpServiceSendVerifyEmailProcedure is the fully-qualified name of the SignUpService's
	// SendVerifyEmail RPC.
	SignUpServiceSendVerifyEmailProcedure = "/redpanda.api.gatekeeper.v1alpha1.SignUpService/SendVerifyEmail"
	// SignUpServiceValidateEntitlementProcedure is the fully-qualified name of the SignUpService's
	// ValidateEntitlement RPC.
	SignUpServiceValidateEntitlementProcedure = "/redpanda.api.gatekeeper.v1alpha1.SignUpService/ValidateEntitlement"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	signUpServiceServiceDescriptor                     = v1alpha1.File_redpanda_api_gatekeeper_v1alpha1_gatekeeper_proto.Services().ByName("SignUpService")
	signUpServiceSignUpMethodDescriptor                = signUpServiceServiceDescriptor.Methods().ByName("SignUp")
	signUpServiceSignUpFromMarketplaceMethodDescriptor = signUpServiceServiceDescriptor.Methods().ByName("SignUpFromMarketplace")
	signUpServiceSendVerifyEmailMethodDescriptor       = signUpServiceServiceDescriptor.Methods().ByName("SendVerifyEmail")
	signUpServiceValidateEntitlementMethodDescriptor   = signUpServiceServiceDescriptor.Methods().ByName("ValidateEntitlement")
)

// SignUpServiceClient is a client for the redpanda.api.gatekeeper.v1alpha1.SignUpService service.
type SignUpServiceClient interface {
	SignUp(context.Context, *connect.Request[v1alpha1.SignUpRequest]) (*connect.Response[v1alpha1.SignUpResponse], error)
	SignUpFromMarketplace(context.Context, *connect.Request[v1alpha1.SignUpFromMarketplaceRequest]) (*connect.Response[v1alpha1.SignUpFromMarketplaceResponse], error)
	SendVerifyEmail(context.Context, *connect.Request[v1alpha1.SendVerifyEmailRequest]) (*connect.Response[v1alpha1.SendVerifyEmailResponse], error)
	ValidateEntitlement(context.Context, *connect.Request[v1alpha1.ValidateEntitlementRequest]) (*connect.Response[v1alpha1.ValidateEntitlementResponse], error)
}

// NewSignUpServiceClient constructs a client for the redpanda.api.gatekeeper.v1alpha1.SignUpService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSignUpServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SignUpServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &signUpServiceClient{
		signUp: connect.NewClient[v1alpha1.SignUpRequest, v1alpha1.SignUpResponse](
			httpClient,
			baseURL+SignUpServiceSignUpProcedure,
			connect.WithSchema(signUpServiceSignUpMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		signUpFromMarketplace: connect.NewClient[v1alpha1.SignUpFromMarketplaceRequest, v1alpha1.SignUpFromMarketplaceResponse](
			httpClient,
			baseURL+SignUpServiceSignUpFromMarketplaceProcedure,
			connect.WithSchema(signUpServiceSignUpFromMarketplaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sendVerifyEmail: connect.NewClient[v1alpha1.SendVerifyEmailRequest, v1alpha1.SendVerifyEmailResponse](
			httpClient,
			baseURL+SignUpServiceSendVerifyEmailProcedure,
			connect.WithSchema(signUpServiceSendVerifyEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		validateEntitlement: connect.NewClient[v1alpha1.ValidateEntitlementRequest, v1alpha1.ValidateEntitlementResponse](
			httpClient,
			baseURL+SignUpServiceValidateEntitlementProcedure,
			connect.WithSchema(signUpServiceValidateEntitlementMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// signUpServiceClient implements SignUpServiceClient.
type signUpServiceClient struct {
	signUp                *connect.Client[v1alpha1.SignUpRequest, v1alpha1.SignUpResponse]
	signUpFromMarketplace *connect.Client[v1alpha1.SignUpFromMarketplaceRequest, v1alpha1.SignUpFromMarketplaceResponse]
	sendVerifyEmail       *connect.Client[v1alpha1.SendVerifyEmailRequest, v1alpha1.SendVerifyEmailResponse]
	validateEntitlement   *connect.Client[v1alpha1.ValidateEntitlementRequest, v1alpha1.ValidateEntitlementResponse]
}

// SignUp calls redpanda.api.gatekeeper.v1alpha1.SignUpService.SignUp.
func (c *signUpServiceClient) SignUp(ctx context.Context, req *connect.Request[v1alpha1.SignUpRequest]) (*connect.Response[v1alpha1.SignUpResponse], error) {
	return c.signUp.CallUnary(ctx, req)
}

// SignUpFromMarketplace calls redpanda.api.gatekeeper.v1alpha1.SignUpService.SignUpFromMarketplace.
func (c *signUpServiceClient) SignUpFromMarketplace(ctx context.Context, req *connect.Request[v1alpha1.SignUpFromMarketplaceRequest]) (*connect.Response[v1alpha1.SignUpFromMarketplaceResponse], error) {
	return c.signUpFromMarketplace.CallUnary(ctx, req)
}

// SendVerifyEmail calls redpanda.api.gatekeeper.v1alpha1.SignUpService.SendVerifyEmail.
func (c *signUpServiceClient) SendVerifyEmail(ctx context.Context, req *connect.Request[v1alpha1.SendVerifyEmailRequest]) (*connect.Response[v1alpha1.SendVerifyEmailResponse], error) {
	return c.sendVerifyEmail.CallUnary(ctx, req)
}

// ValidateEntitlement calls redpanda.api.gatekeeper.v1alpha1.SignUpService.ValidateEntitlement.
func (c *signUpServiceClient) ValidateEntitlement(ctx context.Context, req *connect.Request[v1alpha1.ValidateEntitlementRequest]) (*connect.Response[v1alpha1.ValidateEntitlementResponse], error) {
	return c.validateEntitlement.CallUnary(ctx, req)
}

// SignUpServiceHandler is an implementation of the redpanda.api.gatekeeper.v1alpha1.SignUpService
// service.
type SignUpServiceHandler interface {
	SignUp(context.Context, *connect.Request[v1alpha1.SignUpRequest]) (*connect.Response[v1alpha1.SignUpResponse], error)
	SignUpFromMarketplace(context.Context, *connect.Request[v1alpha1.SignUpFromMarketplaceRequest]) (*connect.Response[v1alpha1.SignUpFromMarketplaceResponse], error)
	SendVerifyEmail(context.Context, *connect.Request[v1alpha1.SendVerifyEmailRequest]) (*connect.Response[v1alpha1.SendVerifyEmailResponse], error)
	ValidateEntitlement(context.Context, *connect.Request[v1alpha1.ValidateEntitlementRequest]) (*connect.Response[v1alpha1.ValidateEntitlementResponse], error)
}

// NewSignUpServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSignUpServiceHandler(svc SignUpServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	signUpServiceSignUpHandler := connect.NewUnaryHandler(
		SignUpServiceSignUpProcedure,
		svc.SignUp,
		connect.WithSchema(signUpServiceSignUpMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	signUpServiceSignUpFromMarketplaceHandler := connect.NewUnaryHandler(
		SignUpServiceSignUpFromMarketplaceProcedure,
		svc.SignUpFromMarketplace,
		connect.WithSchema(signUpServiceSignUpFromMarketplaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	signUpServiceSendVerifyEmailHandler := connect.NewUnaryHandler(
		SignUpServiceSendVerifyEmailProcedure,
		svc.SendVerifyEmail,
		connect.WithSchema(signUpServiceSendVerifyEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	signUpServiceValidateEntitlementHandler := connect.NewUnaryHandler(
		SignUpServiceValidateEntitlementProcedure,
		svc.ValidateEntitlement,
		connect.WithSchema(signUpServiceValidateEntitlementMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.gatekeeper.v1alpha1.SignUpService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SignUpServiceSignUpProcedure:
			signUpServiceSignUpHandler.ServeHTTP(w, r)
		case SignUpServiceSignUpFromMarketplaceProcedure:
			signUpServiceSignUpFromMarketplaceHandler.ServeHTTP(w, r)
		case SignUpServiceSendVerifyEmailProcedure:
			signUpServiceSendVerifyEmailHandler.ServeHTTP(w, r)
		case SignUpServiceValidateEntitlementProcedure:
			signUpServiceValidateEntitlementHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSignUpServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSignUpServiceHandler struct{}

func (UnimplementedSignUpServiceHandler) SignUp(context.Context, *connect.Request[v1alpha1.SignUpRequest]) (*connect.Response[v1alpha1.SignUpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.gatekeeper.v1alpha1.SignUpService.SignUp is not implemented"))
}

func (UnimplementedSignUpServiceHandler) SignUpFromMarketplace(context.Context, *connect.Request[v1alpha1.SignUpFromMarketplaceRequest]) (*connect.Response[v1alpha1.SignUpFromMarketplaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.gatekeeper.v1alpha1.SignUpService.SignUpFromMarketplace is not implemented"))
}

func (UnimplementedSignUpServiceHandler) SendVerifyEmail(context.Context, *connect.Request[v1alpha1.SendVerifyEmailRequest]) (*connect.Response[v1alpha1.SendVerifyEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.gatekeeper.v1alpha1.SignUpService.SendVerifyEmail is not implemented"))
}

func (UnimplementedSignUpServiceHandler) ValidateEntitlement(context.Context, *connect.Request[v1alpha1.ValidateEntitlementRequest]) (*connect.Response[v1alpha1.ValidateEntitlementResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.gatekeeper.v1alpha1.SignUpService.ValidateEntitlement is not implemented"))
}
