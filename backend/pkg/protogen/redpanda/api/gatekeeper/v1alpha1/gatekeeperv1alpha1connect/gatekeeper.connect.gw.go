// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/gatekeeper/v1alpha1/gatekeeper.proto

package gatekeeperv1alpha1connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1alpha1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/gatekeeper/v1alpha1"
)

// SignUpServiceGatewayServer implements the gRPC server API for the SignUpService service.
type SignUpServiceGatewayServer struct {
	v1alpha1.UnimplementedSignUpServiceServer
	signUp                connect_gateway.UnaryHandler[v1alpha1.SignUpRequest, v1alpha1.SignUpResponse]
	signUpFromMarketplace connect_gateway.UnaryHandler[v1alpha1.SignUpFromMarketplaceRequest, v1alpha1.SignUpFromMarketplaceResponse]
	sendVerifyEmail       connect_gateway.UnaryHandler[v1alpha1.SendVerifyEmailRequest, v1alpha1.SendVerifyEmailResponse]
	validateEntitlement   connect_gateway.UnaryHandler[v1alpha1.ValidateEntitlementRequest, v1alpha1.ValidateEntitlementResponse]
}

// NewSignUpServiceGatewayServer constructs a Connect-Gateway gRPC server for the SignUpService
// service.
func NewSignUpServiceGatewayServer(svc SignUpServiceHandler, opts ...connect_gateway.HandlerOption) *SignUpServiceGatewayServer {
	return &SignUpServiceGatewayServer{
		signUp:                connect_gateway.NewUnaryHandler(SignUpServiceSignUpProcedure, svc.SignUp, opts...),
		signUpFromMarketplace: connect_gateway.NewUnaryHandler(SignUpServiceSignUpFromMarketplaceProcedure, svc.SignUpFromMarketplace, opts...),
		sendVerifyEmail:       connect_gateway.NewUnaryHandler(SignUpServiceSendVerifyEmailProcedure, svc.SendVerifyEmail, opts...),
		validateEntitlement:   connect_gateway.NewUnaryHandler(SignUpServiceValidateEntitlementProcedure, svc.ValidateEntitlement, opts...),
	}
}

func (s *SignUpServiceGatewayServer) SignUp(ctx context.Context, req *v1alpha1.SignUpRequest) (*v1alpha1.SignUpResponse, error) {
	return s.signUp(ctx, req)
}

func (s *SignUpServiceGatewayServer) SignUpFromMarketplace(ctx context.Context, req *v1alpha1.SignUpFromMarketplaceRequest) (*v1alpha1.SignUpFromMarketplaceResponse, error) {
	return s.signUpFromMarketplace(ctx, req)
}

func (s *SignUpServiceGatewayServer) SendVerifyEmail(ctx context.Context, req *v1alpha1.SendVerifyEmailRequest) (*v1alpha1.SendVerifyEmailResponse, error) {
	return s.sendVerifyEmail(ctx, req)
}

func (s *SignUpServiceGatewayServer) ValidateEntitlement(ctx context.Context, req *v1alpha1.ValidateEntitlementRequest) (*v1alpha1.ValidateEntitlementResponse, error) {
	return s.validateEntitlement(ctx, req)
}

// RegisterSignUpServiceHandlerGatewayServer registers the Connect handlers for the SignUpService
// "svc" to "mux".
func RegisterSignUpServiceHandlerGatewayServer(mux *runtime.ServeMux, svc SignUpServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1alpha1.RegisterSignUpServiceHandlerServer(context.TODO(), mux, NewSignUpServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
