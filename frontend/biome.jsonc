{
  "$schema": "https://biomejs.dev/schemas/2.2.5/schema.json",
  "vcs": {
    "enabled": true,
    "clientKind": "git",
    "useIgnoreFile": true,
    "defaultBranch": "master"
  },
  "files": {
    "ignoreUnknown": false,
    "includes": [
      "**/*",
      "!**/protogen",
      "!**/protogen/**/*",
      "!**/dist/**/*",
      "!**/build/**/*",
      "!**/out/**/*",
      "!**/coverage/**/*",
      "!**/.nyc_output/**/*",
      "!**/*.css",
      "!**/components/redpanda-ui"
    ]
  },
  "formatter": {
    "enabled": true,
    "formatWithErrors": true,
    "indentStyle": "space",
    "indentWidth": 2,
    "lineEnding": "lf",
    "lineWidth": 120,
    "attributePosition": "auto",
    "bracketSpacing": true
  },
  "assist": {
    "actions": {
      "source": {
        // Provides a code action to sort the imports and exports in the file using a built-in or custom order.
        "organizeImports": {
          "level": "on",
          "options": {
            "groups": [":PACKAGE:", ":BLANK_LINE:", ["@/**"], ":BLANK_LINE:", ["./**"]]
          }
        },
        // Enforce attribute sorting in JSX elements.
        "useSortedAttributes": "on",
        // Enforce ordering of a JS object properties.
        "useSortedKeys": "off"
      }
    }
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true,
      "suspicious": {
        // Disallow the any type usage.
        "noExplicitAny": "off",
        // Discourage the usage of Array index in keys. We use them a lot with string interpolation though. In the future we may rely on React.useId().
        "noArrayIndexKey": "off",
        // Disallow assignments in expressions.
        "noAssignInExpressions": "off",
        // Disallow variables from evolving into any type through reassignments.
        "noEvolvingTypes": "off", // enable later
        // Require for-in loops to include an if statement.
        "useGuardForIn": "off", // enable later
        // Disallow empty block statements and static blocks.
        "noEmptyBlockStatements": "off", // enable later
        // Ensure async functions utilize await.
        "useAwait": "off", // enable later
        // Enforce get methods to always return a value.
        "useGetterReturn": "off", // enable later
        // Disallow the use of console. This will help us clean up the browser console.
        "noConsole": "off" // enable later
      },
      "a11y": {
        /** ------------------------ JavaScript Rules ------------------------ **/

        // Enforce that the accessKey attribute is not used on any HTML element.
        "noAccessKey": "error",
        // Enforce that aria-hidden="true" is not set on focusable elements.
        "noAriaHiddenOnFocusable": "error",
        // Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.
        "noAriaUnsupportedElements": "error",
        // Enforces that no distracting elements are used.
        "noDistractingElements": "error",
        // The scope prop should be used only on <th> elements.
        "noHeaderScope": "error",
        // Enforce that non-interactive ARIA roles are not assigned to interactive HTML elements.
        "noInteractiveElementToNoninteractiveRole": "error",
        // Enforce that a label element or component has a text label and an associated input.
        "noLabelWithoutControl": "error",
        // Disallow use event handlers on non-interactive elements.
        "noNoninteractiveElementInteractions": "error",
        // Enforce that interactive ARIA roles are not assigned to non-interactive HTML elements.
        "noNoninteractiveElementToInteractiveRole": "error",
        // Enforce that tabIndex is not assigned to non-interactive HTML elements.
        "noNoninteractiveTabindex": "error",
        // Prevent the usage of positive integers on tabIndex property.
        "noPositiveTabindex": "error",
        // Enforce img alt prop does not contain the word "image", "picture", or "photo".
        "noRedundantAlt": "error",
        // Enforce explicit role property is not the same as implicit/default role property on an element.
        "noRedundantRoles": "error",
        // Enforce that static, visible elements (such as <div>) that have click handlers use the valid role attribute.
        "noStaticElementInteractions": "error",
        // Enforces the usage of the title element for the svg element.
        "noSvgWithoutTitle": "error",
        // Enforce that all elements that require alternative text have meaningful information to relay back to the end user.
        "useAltText": "error",
        // Enforce that anchors have content and that the content is accessible to screen readers.
        "useAnchorContent": "error",
        // Enforce that tabIndex is assigned to non-interactive HTML elements with aria-activedescendant.
        "useAriaActivedescendantWithTabindex": "error",
        // Enforce that elements with ARIA roles must have all required ARIA attributes for that role.
        "useAriaPropsForRole": "error",
        // Enforce that ARIA properties are valid for the roles that are supported by the element.
        "useAriaPropsSupportedByRole": "error",
        // Enforces the usage of the attribute type for the element button.
        "useButtonType": "error",
        // Elements with an interactive role and interaction handlers must be focusable.
        "useFocusableInteractive": "error",
        // Enforce that heading elements (h1, h2, etc.) have content and that the content is accessible to screen readers. Accessible means that it is not hidden using the aria-hidden prop.
        "useHeadingContent": "error",
        // Enforce that html element has lang attribute.
        "useHtmlLang": "error",
        // Enforces the usage of the attribute title for the element iframe.
        "useIframeTitle": "error",
        // Enforce onClick is accompanied by at least one of the following: onKeyUp, onKeyDown, onKeyPress.
        "useKeyWithClickEvents": "error",
        // Enforce onMouseOver / onMouseOut are accompanied by onFocus / onBlur.
        "useKeyWithMouseEvents": "error",
        // Enforces that audio and video elements must have a track for captions.
        "useMediaCaption": "error",
        // It detects the use of role attributes in JSX elements and suggests using semantic elements instead.
        "useSemanticElements": "error",
        // Enforce that all anchors are valid, and they are navigable elements.
        "useValidAnchor": "error",
        // Ensures that ARIA properties aria-* are all valid.
        "useValidAriaProps": "error",
        // Elements with ARIA roles must use a valid, non-abstract ARIA role.
        "useValidAriaRole": "error",
        // Enforce that ARIA state and property values are valid.
        "useValidAriaValues": "error",
        // Use valid values for the autocomplete attribute on input elements.
        "useValidAutocomplete": "error",
        // Ensure that the attribute passed to the lang attribute is a correct ISO language and/or country.
        "useValidLang": "error",

        // Enforce that autoFocus prop is not used on elements.
        "noAutofocus": "off",

        /** ------------------------ CSS Rules ------------------------ **/
        // Disallow a missing generic family keyword within font families.
        "useGenericFontNames": "error"
      },
      "style": {
        // Disallow reassigning function parameters. This is a common MobX pattern in Console, so we leave it for now.
        "noParameterAssign": "off",
        // Enforce the use of as const over literal type and type annotation.
        "useAsConstAssertion": "error",
        // Enforce default function parameters and optional function parameters to be last.
        "useDefaultParameterLast": "error",
        // Require that each enum member value be explicitly initialized.
        "useEnumInitializers": "error",
        // Prevent extra closing tags for components without children.
        "useSelfClosingElements": "error",
        // Disallow multiple variable declarations in the same variable statement
        "useSingleVarDeclarator": "error",
        // Disallow template literals if interpolation and special-character handling are not needed
        "noUnusedTemplateLiteral": "error",
        // Use the Number properties instead of global ones. For instance. Number.isNaN();
        "useNumberNamespace": "error",
        // Disallow type annotations for variables, parameters, and class properties initialized with a literal expression.
        "noInferrableTypes": "error",
        // Disallow else block when the if block breaks early.
        "noUselessElse": "error",
        // Enforce naming conventions for JavaScript and TypeScript filenames.
        // Supports TanStack Router convention: allows - prefixed files (e.g., -hooks.ts, -components.tsx)
        // For now we don't have bandwidth to refactor the codebase fully.
        "useFilenamingConvention": "off", // enable later
        // Disallow exporting an imported variable. Sometimes we need to do it for monaco editor.
        "noExportedImports": "off", // enable later
        // Require the default clause in switch statements.
        "useDefaultSwitchClause": "off", // enable later
        // Require consistent accessibility modifiers on class properties and methods.
        "useConsistentMemberAccessibility": "off", // enable later
        // Disallow the use of TypeScript's namespaces. It's legacy as of TS v5+.
        "noNamespace": "off", // enable later
        // Disallow nested ternary expressions. Too many cases to cover for now.
        "noNestedTernary": "off", // enable later
        // Disallow TypeScript enum. We use them a lot so it's off.
        "noEnum": "off",
        // Disallow throwing non-Error values. For now we allow it.
        "useThrowOnlyError": "off",
        // Disallow the use of parameter properties in class constructors.
        "noParameterProperties": "off", // enable later
        // Enforce using single if instead of nested if clauses.
        "useCollapsedIf": "off" // enable later
      },
      "complexity": {
        // Disallow primitive type aliases and misleading types.
        "noBannedTypes": "off",
        // Disallow the use of void operators, which is not a familiar operator. We don't want to change the current logic of the codebase, so it's off for now.
        "noVoid": "off", // enable later,
        // Disallow functions that exceed a given Cognitive Complexity score. Similar to go cyclop
        "noExcessiveCognitiveComplexity": "off" // enable later
      },
      "correctness": {
        // Prevents the usage of variables that haven't been declared inside the document.
        // Prevents the usage of variables that haven't been declared inside the document.
        "noUndeclaredVariables": "off" // enable later
      },
      "nursery": {
        // Disallow variable declarations from shadowing variables declared in the outer scope.
        "noShadow": "off" // enable later
      },
      "performance": {
        // Prevent usage of <img> element in a Next.js project. We don't use Next.js
        "noImgElement": "off",
        // Require regex literals to be declared at the top level. Performance hit.
        "useTopLevelRegex": "off", // enable later
        // Disallow the use of namespace imports.
        "noNamespaceImport": "error"
      }
    }
  },
  "javascript": {
    "formatter": {
      "arrowParentheses": "always",
      "bracketSameLine": false,
      "quoteStyle": "single",
      "quoteProperties": "asNeeded",
      "semicolons": "always",
      "trailingCommas": "es5"
    },
    "jsxRuntime": "reactClassic"
  },
  "json": {
    "assist": {
      "enabled": false
    },
    "formatter": {
      "enabled": true,
      "indentStyle": "space",
      "indentWidth": 2,
      "lineEnding": "lf",
      "lineWidth": 120,
      "trailingCommas": "none"
    },
    "parser": {
      "allowComments": false,
      "allowTrailingCommas": false
    }
  },
  "css": {
    "formatter": {
      "lineEnding": "lf",
      "lineWidth": 120,
      "quoteStyle": "single"
    },
    "parser": {
      "allowWrongLineComments": false,
      "cssModules": false
    }
  },
  "overrides": [
    {
      // Test files
      "includes": ["**/*.{test,spec}.{ts,tsx,js,jsx}", "**/__tests__/**/*"],
      "linter": {
        "rules": {
          "complexity": {
            "noExcessiveCognitiveComplexity": "off"
          },
          "suspicious": {
            "noConsole": "off",
            "noExplicitAny": "off"
          }
        }
      }
    },
    {
      // Scripts and CLI tools
      "includes": ["**/scripts/**/*", "**/bin/**/*", "*.mjs", "*.cjs"],
      "linter": {
        "rules": {
          "suspicious": {
            "noConsole": "off"
          },
          "style": {
            "noProcessEnv": "off"
          }
        }
      }
    },
    {
      // Environment and type definition files
      "includes": ["**/*.d.ts", "**/{env,global,types}.d.ts"],
      "linter": {
        "rules": {
          "correctness": {
            "noUnusedVariables": "off",
            "noUndeclaredVariables": "off"
          }
        }
      }
    },
    {
      // Files that should not be processed (build output, generated files, non-JS files)
      "includes": ["**/dist/**/*", "**/build/**/*", "**/out/**/*", "**/coverage/**/*", ".env", ".env.*"],
      "formatter": {
        "enabled": false
      },
      "linter": {
        "enabled": false
      }
    },
    {
      // Package.json and similar JSON config files
      "includes": [
        "package.json",
        "{tsconfig,jsconfig}.json",
        "tsconfig.*.json",
        ".vscode/*.json",
        ".github/**/*.json"
      ],
      "json": {
        "parser": {
          "allowComments": true,
          "allowTrailingCommas": true
        }
      }
    }
  ]
}
