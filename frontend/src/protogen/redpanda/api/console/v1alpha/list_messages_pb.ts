// @generated by protoc-gen-es v1.3.0 with parameter "target=ts,import_extension="
// @generated from file redpanda/api/console/v1alpha/list_messages.proto (package redpanda.api.console.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message redpanda.api.console.v1alpha.ListMessagesRequest
 */
export class ListMessagesRequest extends Message<ListMessagesRequest> {
  /**
   * @generated from field: string topic = 1;
   */
  topic = "";

  constructor(data?: PartialMessage<ListMessagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha.ListMessagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMessagesRequest {
    return new ListMessagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMessagesRequest {
    return new ListMessagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMessagesRequest {
    return new ListMessagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListMessagesRequest | PlainMessage<ListMessagesRequest> | undefined, b: ListMessagesRequest | PlainMessage<ListMessagesRequest> | undefined): boolean {
    return proto3.util.equals(ListMessagesRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha.ListMessagesResponse
 */
export class ListMessagesResponse extends Message<ListMessagesResponse> {
  /**
   * @generated from field: redpanda.api.console.v1alpha.KafkaRecordPayload key = 1;
   */
  key?: KafkaRecordPayload;

  /**
   * @generated from field: redpanda.api.console.v1alpha.KafkaRecordPayload value = 2;
   */
  value?: KafkaRecordPayload;

  constructor(data?: PartialMessage<ListMessagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha.ListMessagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: KafkaRecordPayload },
    { no: 2, name: "value", kind: "message", T: KafkaRecordPayload },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMessagesResponse {
    return new ListMessagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMessagesResponse {
    return new ListMessagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMessagesResponse {
    return new ListMessagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListMessagesResponse | PlainMessage<ListMessagesResponse> | undefined, b: ListMessagesResponse | PlainMessage<ListMessagesResponse> | undefined): boolean {
    return proto3.util.equals(ListMessagesResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha.KafkaRecordPayload
 */
export class KafkaRecordPayload extends Message<KafkaRecordPayload> {
  /**
   * @generated from field: bytes original_payload = 1;
   */
  originalPayload = new Uint8Array(0);

  /**
   * @generated from field: int32 payload_size = 2;
   */
  payloadSize = 0;

  /**
   * @generated from field: bytes deserialized_payload = 3;
   */
  deserializedPayload = new Uint8Array(0);

  /**
   * @generated from field: bool is_payload_too_large = 4;
   */
  isPayloadTooLarge = false;

  constructor(data?: PartialMessage<KafkaRecordPayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha.KafkaRecordPayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "original_payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "payload_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "deserialized_payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "is_payload_too_large", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KafkaRecordPayload {
    return new KafkaRecordPayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KafkaRecordPayload {
    return new KafkaRecordPayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KafkaRecordPayload {
    return new KafkaRecordPayload().fromJsonString(jsonString, options);
  }

  static equals(a: KafkaRecordPayload | PlainMessage<KafkaRecordPayload> | undefined, b: KafkaRecordPayload | PlainMessage<KafkaRecordPayload> | undefined): boolean {
    return proto3.util.equals(KafkaRecordPayload, a, b);
  }
}

