// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file redpanda/api/console/v1alpha1/authentication.proto (package redpanda.api.console.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum redpanda.api.console.v1alpha1.SASLMechanism
 */
export enum SASLMechanism {
  /**
   * The SASL mechanism is unspecified.
   *
   * @generated from enum value: SASL_MECHANISM_UNSPECIFIED = 0;
   */
  SASL_MECHANISM_UNSPECIFIED = 0,

  /**
   * The SASL mechanism using SCRAM-SHA-256.
   *
   * @generated from enum value: SASL_MECHANISM_SCRAM_SHA_256 = 1;
   */
  SASL_MECHANISM_SCRAM_SHA_256 = 1,

  /**
   * The SASL mechanism using SCRAM-SHA-512.
   *
   * @generated from enum value: SASL_MECHANISM_SCRAM_SHA_512 = 2;
   */
  SASL_MECHANISM_SCRAM_SHA_512 = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SASLMechanism)
proto3.util.setEnumType(SASLMechanism, "redpanda.api.console.v1alpha1.SASLMechanism", [
  { no: 0, name: "SASL_MECHANISM_UNSPECIFIED" },
  { no: 1, name: "SASL_MECHANISM_SCRAM_SHA_256" },
  { no: 2, name: "SASL_MECHANISM_SCRAM_SHA_512" },
]);

/**
 * @generated from enum redpanda.api.console.v1alpha1.AuthenticationMethod
 */
export enum AuthenticationMethod {
  /**
   * The authentication method is unspecified.
   *
   * @generated from enum value: AUTHENTICATION_METHOD_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The authentication method using OpenID Connect.
   *
   * @generated from enum value: AUTHENTICATION_METHOD_OIDC = 1;
   */
  OIDC = 1,

  /**
   * The authentication method using plain username/password.
   *
   * @generated from enum value: AUTHENTICATION_METHOD_BASIC = 2;
   */
  BASIC = 2,

  /**
   * The authentication method for Redpanda Cloud.
   *
   * @generated from enum value: AUTHENTICATION_METHOD_REDPANDA_CLOUD = 3;
   */
  REDPANDA_CLOUD = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(AuthenticationMethod)
proto3.util.setEnumType(AuthenticationMethod, "redpanda.api.console.v1alpha1.AuthenticationMethod", [
  { no: 0, name: "AUTHENTICATION_METHOD_UNSPECIFIED" },
  { no: 1, name: "AUTHENTICATION_METHOD_OIDC" },
  { no: 2, name: "AUTHENTICATION_METHOD_BASIC" },
  { no: 3, name: "AUTHENTICATION_METHOD_REDPANDA_CLOUD" },
]);

/**
 * @generated from message redpanda.api.console.v1alpha1.LoginSaslScramRequest
 */
export class LoginSaslScramRequest extends Message<LoginSaslScramRequest> {
  /**
   * The username for the login request.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * The password for the login request.
   *
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * The SASL mechanism to be used for authentication.
   *
   * @generated from field: redpanda.api.console.v1alpha1.SASLMechanism mechanism = 3;
   */
  mechanism = SASLMechanism.SASL_MECHANISM_UNSPECIFIED;

  /**
   * Whether or not the session token should be returned in the body.
   *
   * @generated from field: bool return_token = 4;
   */
  returnToken = false;

  constructor(data?: PartialMessage<LoginSaslScramRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.LoginSaslScramRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "mechanism", kind: "enum", T: proto3.getEnumType(SASLMechanism) },
    { no: 4, name: "return_token", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginSaslScramRequest {
    return new LoginSaslScramRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginSaslScramRequest {
    return new LoginSaslScramRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginSaslScramRequest {
    return new LoginSaslScramRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoginSaslScramRequest | PlainMessage<LoginSaslScramRequest> | undefined, b: LoginSaslScramRequest | PlainMessage<LoginSaslScramRequest> | undefined): boolean {
    return proto3.util.equals(LoginSaslScramRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.LoginSaslScramResponse
 */
export class LoginSaslScramResponse extends Message<LoginSaslScramResponse> {
  /**
   * SessionToken is only set if return_token is set to true in the request.
   *
   * @generated from field: string session_token = 1;
   */
  sessionToken = "";

  constructor(data?: PartialMessage<LoginSaslScramResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.LoginSaslScramResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginSaslScramResponse {
    return new LoginSaslScramResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginSaslScramResponse {
    return new LoginSaslScramResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginSaslScramResponse {
    return new LoginSaslScramResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LoginSaslScramResponse | PlainMessage<LoginSaslScramResponse> | undefined, b: LoginSaslScramResponse | PlainMessage<LoginSaslScramResponse> | undefined): boolean {
    return proto3.util.equals(LoginSaslScramResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.UserIdentity
 */
export class UserIdentity extends Message<UserIdentity> {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * @generated from field: redpanda.api.console.v1alpha1.AuthenticationMethod auth_method = 2;
   */
  authMethod = AuthenticationMethod.UNSPECIFIED;

  constructor(data?: PartialMessage<UserIdentity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.UserIdentity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "auth_method", kind: "enum", T: proto3.getEnumType(AuthenticationMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserIdentity {
    return new UserIdentity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserIdentity {
    return new UserIdentity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserIdentity {
    return new UserIdentity().fromJsonString(jsonString, options);
  }

  static equals(a: UserIdentity | PlainMessage<UserIdentity> | undefined, b: UserIdentity | PlainMessage<UserIdentity> | undefined): boolean {
    return proto3.util.equals(UserIdentity, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.ListAuthenticationMethodsRequest
 */
export class ListAuthenticationMethodsRequest extends Message<ListAuthenticationMethodsRequest> {
  constructor(data?: PartialMessage<ListAuthenticationMethodsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListAuthenticationMethodsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAuthenticationMethodsRequest {
    return new ListAuthenticationMethodsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAuthenticationMethodsRequest {
    return new ListAuthenticationMethodsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAuthenticationMethodsRequest {
    return new ListAuthenticationMethodsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAuthenticationMethodsRequest | PlainMessage<ListAuthenticationMethodsRequest> | undefined, b: ListAuthenticationMethodsRequest | PlainMessage<ListAuthenticationMethodsRequest> | undefined): boolean {
    return proto3.util.equals(ListAuthenticationMethodsRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.ListAuthenticationMethodsResponse
 */
export class ListAuthenticationMethodsResponse extends Message<ListAuthenticationMethodsResponse> {
  /**
   * The list of available authentication methods.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.AuthenticationMethod methods = 1;
   */
  methods: AuthenticationMethod[] = [];

  constructor(data?: PartialMessage<ListAuthenticationMethodsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListAuthenticationMethodsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "methods", kind: "enum", T: proto3.getEnumType(AuthenticationMethod), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAuthenticationMethodsResponse {
    return new ListAuthenticationMethodsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAuthenticationMethodsResponse {
    return new ListAuthenticationMethodsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAuthenticationMethodsResponse {
    return new ListAuthenticationMethodsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAuthenticationMethodsResponse | PlainMessage<ListAuthenticationMethodsResponse> | undefined, b: ListAuthenticationMethodsResponse | PlainMessage<ListAuthenticationMethodsResponse> | undefined): boolean {
    return proto3.util.equals(ListAuthenticationMethodsResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.GetIdentityRequest
 */
export class GetIdentityRequest extends Message<GetIdentityRequest> {
  constructor(data?: PartialMessage<GetIdentityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetIdentityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIdentityRequest {
    return new GetIdentityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIdentityRequest {
    return new GetIdentityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIdentityRequest {
    return new GetIdentityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIdentityRequest | PlainMessage<GetIdentityRequest> | undefined, b: GetIdentityRequest | PlainMessage<GetIdentityRequest> | undefined): boolean {
    return proto3.util.equals(GetIdentityRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.GetIdentityResponse
 */
export class GetIdentityResponse extends Message<GetIdentityResponse> {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * @generated from field: redpanda.api.console.v1alpha1.AuthenticationMethod authentication_method = 2;
   */
  authenticationMethod = AuthenticationMethod.UNSPECIFIED;

  /**
   * @generated from field: string avatar_url = 3;
   */
  avatarUrl = "";

  constructor(data?: PartialMessage<GetIdentityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetIdentityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "authentication_method", kind: "enum", T: proto3.getEnumType(AuthenticationMethod) },
    { no: 3, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIdentityResponse {
    return new GetIdentityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIdentityResponse {
    return new GetIdentityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIdentityResponse {
    return new GetIdentityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetIdentityResponse | PlainMessage<GetIdentityResponse> | undefined, b: GetIdentityResponse | PlainMessage<GetIdentityResponse> | undefined): boolean {
    return proto3.util.equals(GetIdentityResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.ClearSessionCookieRequest
 */
export class ClearSessionCookieRequest extends Message<ClearSessionCookieRequest> {
  constructor(data?: PartialMessage<ClearSessionCookieRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ClearSessionCookieRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClearSessionCookieRequest {
    return new ClearSessionCookieRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClearSessionCookieRequest {
    return new ClearSessionCookieRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClearSessionCookieRequest {
    return new ClearSessionCookieRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClearSessionCookieRequest | PlainMessage<ClearSessionCookieRequest> | undefined, b: ClearSessionCookieRequest | PlainMessage<ClearSessionCookieRequest> | undefined): boolean {
    return proto3.util.equals(ClearSessionCookieRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.ClearSessionCookieResponse
 */
export class ClearSessionCookieResponse extends Message<ClearSessionCookieResponse> {
  constructor(data?: PartialMessage<ClearSessionCookieResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ClearSessionCookieResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClearSessionCookieResponse {
    return new ClearSessionCookieResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClearSessionCookieResponse {
    return new ClearSessionCookieResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClearSessionCookieResponse {
    return new ClearSessionCookieResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClearSessionCookieResponse | PlainMessage<ClearSessionCookieResponse> | undefined, b: ClearSessionCookieResponse | PlainMessage<ClearSessionCookieResponse> | undefined): boolean {
    return proto3.util.equals(ClearSessionCookieResponse, a, b);
  }
}

