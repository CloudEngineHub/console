// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file redpanda/api/dataplane/v1alpha3/ai_agent.proto (package redpanda.api.dataplane.v1alpha3, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../../buf/validate/validate_pb";
import { file_google_api_annotations } from "../../../../google/api/annotations_pb";
import { file_google_api_field_behavior } from "../../../../google/api/field_behavior_pb";
import { file_google_api_resource } from "../../../../google/api/resource_pb";
import type { FieldMask } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask } from "@bufbuild/protobuf/wkt";
import { file_protoc_gen_openapiv2_options_annotations } from "../../../../protoc-gen-openapiv2/options/annotations_pb";
import { file_redpanda_api_auth_v1_authorization } from "../../auth/v1/authorization_pb";
import type { Pipeline_Resources } from "../v1/pipeline_pb";
import { file_redpanda_api_dataplane_v1_pipeline } from "../v1/pipeline_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file redpanda/api/dataplane/v1alpha3/ai_agent.proto.
 */
export const file_redpanda_api_dataplane_v1alpha3_ai_agent: GenFile = /*@__PURE__*/
  fileDesc("", [file_buf_validate_validate, file_google_api_annotations, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_field_mask, file_protoc_gen_openapiv2_options_annotations, file_redpanda_api_auth_v1_authorization, file_redpanda_api_dataplane_v1_pipeline]);

/**
 * Defines the AI Agent resource.
 *
 * @generated from message redpanda.api.dataplane.v1alpha3.AIAgent
 */
export type AIAgent = Message<"redpanda.api.dataplane.v1alpha3.AIAgent"> & {
  /**
   * AI Agent ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * User-friendly AI agent name.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Optional AI agent description.
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * System Prompt for the AI agent behavior.
   *
   * @generated from field: string system_prompt = 4;
   */
  systemPrompt: string;

  /**
   * LLM configuration settings for the AI agent.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha3.AIAgent.Provider provider = 5;
   */
  provider?: AIAgent_Provider;

  /**
   * @generated from field: int32 dimensions = 6;
   */
  dimensions: number;

  /**
   * @generated from field: string model = 7;
   */
  model: string;

  /**
   * Map of MCP servers that this AI agent can use.
   *
   * @generated from field: map<string, redpanda.api.dataplane.v1alpha3.AIAgent.MCPServer> mcp_servers = 8;
   */
  mcpServers: { [key: string]: AIAgent_MCPServer };

  /**
   * The number of resources that are guaranteed to be assigned to the AI Agent.
   *
   * @generated from field: redpanda.api.dataplane.v1.Pipeline.Resources resources = 9;
   */
  resources?: Pipeline_Resources;

  /**
   * Tags are key-value pairs that can be assigned to an AI agent resource.
   * They help organize AI agents and enable filtering when listing them.
   *
   * @generated from field: map<string, string> tags = 10;
   */
  tags: { [key: string]: string };

  /**
   * The current AI agent state.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha3.AIAgent.State state = 11;
   */
  state: AIAgent_State;

  /**
   * URL to connect to the AI agent endpoint.
   *
   * @generated from field: string url = 12;
   */
  url: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.AIAgent.
 * Use `create(AIAgentSchema)` to create a new message.
 */
export const AIAgentSchema: GenMessage<AIAgent> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 0);

/**
 * @generated from message redpanda.api.dataplane.v1alpha3.AIAgent.Provider
 */
export type AIAgent_Provider = Message<"redpanda.api.dataplane.v1alpha3.AIAgent.Provider"> & {
  /**
   * @generated from oneof redpanda.api.dataplane.v1alpha3.AIAgent.Provider.provider
   */
  provider: {
    /**
     * @generated from field: redpanda.api.dataplane.v1alpha3.AIAgent.Provider.OpenAI openai = 1;
     */
    value: AIAgent_Provider_OpenAI;
    case: "openai";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.AIAgent.Provider.
 * Use `create(AIAgent_ProviderSchema)` to create a new message.
 */
export const AIAgent_ProviderSchema: GenMessage<AIAgent_Provider> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 0, 0);

/**
 * @generated from message redpanda.api.dataplane.v1alpha3.AIAgent.Provider.OpenAI
 */
export type AIAgent_Provider_OpenAI = Message<"redpanda.api.dataplane.v1alpha3.AIAgent.Provider.OpenAI"> & {
  /**
   * @generated from field: string api_key = 1;
   */
  apiKey: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.AIAgent.Provider.OpenAI.
 * Use `create(AIAgent_Provider_OpenAISchema)` to create a new message.
 */
export const AIAgent_Provider_OpenAISchema: GenMessage<AIAgent_Provider_OpenAI> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 0, 0, 0);

/**
 * MCP server configuration.
 *
 * @generated from message redpanda.api.dataplane.v1alpha3.AIAgent.MCPServer
 */
export type AIAgent_MCPServer = Message<"redpanda.api.dataplane.v1alpha3.AIAgent.MCPServer"> & {
  /**
   * ID of the Redpanda MCP server.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.AIAgent.MCPServer.
 * Use `create(AIAgent_MCPServerSchema)` to create a new message.
 */
export const AIAgent_MCPServerSchema: GenMessage<AIAgent_MCPServer> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 0, 1);

/**
 * State of the AI agent.
 *
 * @generated from enum redpanda.api.dataplane.v1alpha3.AIAgent.State
 */
export enum AIAgent_State {
  /**
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The AI agent is starting.
   *
   * @generated from enum value: STATE_STARTING = 1;
   */
  STARTING = 1,

  /**
   * The AI agent is running and ready to handle requests.
   *
   * @generated from enum value: STATE_RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * The AI agent is in the process of stopping.
   *
   * @generated from enum value: STATE_STOPPING = 3;
   */
  STOPPING = 3,

  /**
   * The AI agent is stopped and in paused state.
   *
   * @generated from enum value: STATE_STOPPED = 4;
   */
  STOPPED = 4,

  /**
   * The AI agent encountered an error.
   *
   * @generated from enum value: STATE_ERROR = 5;
   */
  ERROR = 5,
}

/**
 * Describes the enum redpanda.api.dataplane.v1alpha3.AIAgent.State.
 */
export const AIAgent_StateSchema: GenEnum<AIAgent_State> = /*@__PURE__*/
  enumDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 0, 0);

/**
 * AIAgentCreate contains the details for the AI agent creation request.
 *
 * @generated from message redpanda.api.dataplane.v1alpha3.AIAgentCreate
 */
export type AIAgentCreate = Message<"redpanda.api.dataplane.v1alpha3.AIAgentCreate"> & {
  /**
   * User-friendly AI agent name.
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * AI agent description.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * System Prompt for the AI agent behavior.
   *
   * @generated from field: string system_prompt = 3;
   */
  systemPrompt: string;

  /**
   * LLM configuration settings for the AI agent.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha3.AIAgent.Provider provider = 4;
   */
  provider?: AIAgent_Provider;

  /**
   * @generated from field: int32 dimensions = 5;
   */
  dimensions: number;

  /**
   * @generated from field: string model = 6;
   */
  model: string;

  /**
   * Map of MCP servers that this AI agent can use.
   *
   * @generated from field: map<string, redpanda.api.dataplane.v1alpha3.AIAgent.MCPServer> mcp_servers = 7;
   */
  mcpServers: { [key: string]: AIAgent_MCPServer };

  /**
   * Optional list of tags to attach to an AI agent.
   *
   * @generated from field: map<string, string> tags = 8;
   */
  tags: { [key: string]: string };

  /**
   * The number of resources that are guaranteed to be assigned to the AI agent.
   *
   * @generated from field: redpanda.api.dataplane.v1.Pipeline.Resources resources = 9;
   */
  resources?: Pipeline_Resources;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.AIAgentCreate.
 * Use `create(AIAgentCreateSchema)` to create a new message.
 */
export const AIAgentCreateSchema: GenMessage<AIAgentCreate> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 1);

/**
 * CreateAIAgentRequest is the request of CreateAIAgent.
 *
 * @generated from message redpanda.api.dataplane.v1alpha3.CreateAIAgentRequest
 */
export type CreateAIAgentRequest = Message<"redpanda.api.dataplane.v1alpha3.CreateAIAgentRequest"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha3.AIAgentCreate ai_agent = 1;
   */
  aiAgent?: AIAgentCreate;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.CreateAIAgentRequest.
 * Use `create(CreateAIAgentRequestSchema)` to create a new message.
 */
export const CreateAIAgentRequestSchema: GenMessage<CreateAIAgentRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 2);

/**
 * @generated from message redpanda.api.dataplane.v1alpha3.CreateAIAgentResponse
 */
export type CreateAIAgentResponse = Message<"redpanda.api.dataplane.v1alpha3.CreateAIAgentResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha3.AIAgent ai_agent = 1;
   */
  aiAgent?: AIAgent;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.CreateAIAgentResponse.
 * Use `create(CreateAIAgentResponseSchema)` to create a new message.
 */
export const CreateAIAgentResponseSchema: GenMessage<CreateAIAgentResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 3);

/**
 * @generated from message redpanda.api.dataplane.v1alpha3.GetAIAgentRequest
 */
export type GetAIAgentRequest = Message<"redpanda.api.dataplane.v1alpha3.GetAIAgentRequest"> & {
  /**
   * AI Agent ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.GetAIAgentRequest.
 * Use `create(GetAIAgentRequestSchema)` to create a new message.
 */
export const GetAIAgentRequestSchema: GenMessage<GetAIAgentRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 4);

/**
 * @generated from message redpanda.api.dataplane.v1alpha3.GetAIAgentResponse
 */
export type GetAIAgentResponse = Message<"redpanda.api.dataplane.v1alpha3.GetAIAgentResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha3.AIAgent ai_agent = 1;
   */
  aiAgent?: AIAgent;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.GetAIAgentResponse.
 * Use `create(GetAIAgentResponseSchema)` to create a new message.
 */
export const GetAIAgentResponseSchema: GenMessage<GetAIAgentResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 5);

/**
 * @generated from message redpanda.api.dataplane.v1alpha3.ListAIAgentsRequest
 */
export type ListAIAgentsRequest = Message<"redpanda.api.dataplane.v1alpha3.ListAIAgentsRequest"> & {
  /**
   * List filter.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha3.ListAIAgentsRequest.Filter filter = 1;
   */
  filter?: ListAIAgentsRequest_Filter;

  /**
   * Limit the paginated response to a number of items.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Value of the next_page_token field returned by the previous response.
   * If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.ListAIAgentsRequest.
 * Use `create(ListAIAgentsRequestSchema)` to create a new message.
 */
export const ListAIAgentsRequestSchema: GenMessage<ListAIAgentsRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 6);

/**
 * @generated from message redpanda.api.dataplane.v1alpha3.ListAIAgentsRequest.Filter
 */
export type ListAIAgentsRequest_Filter = Message<"redpanda.api.dataplane.v1alpha3.ListAIAgentsRequest.Filter"> & {
  /**
   * Substring match on AI agent name. Case-sensitive.
   *
   * @generated from field: string name_contains = 1;
   */
  nameContains: string;

  /**
   * Filter AI agents that contain all of these key/value pairs.
   *
   * @generated from field: map<string, string> tags = 2;
   */
  tags: { [key: string]: string };
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.ListAIAgentsRequest.Filter.
 * Use `create(ListAIAgentsRequest_FilterSchema)` to create a new message.
 */
export const ListAIAgentsRequest_FilterSchema: GenMessage<ListAIAgentsRequest_Filter> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 6, 0);

/**
 * @generated from message redpanda.api.dataplane.v1alpha3.ListAIAgentsResponse
 */
export type ListAIAgentsResponse = Message<"redpanda.api.dataplane.v1alpha3.ListAIAgentsResponse"> & {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1alpha3.AIAgent ai_agents = 1;
   */
  aiAgents: AIAgent[];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.ListAIAgentsResponse.
 * Use `create(ListAIAgentsResponseSchema)` to create a new message.
 */
export const ListAIAgentsResponseSchema: GenMessage<ListAIAgentsResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 7);

/**
 * @generated from message redpanda.api.dataplane.v1alpha3.AIAgentUpdate
 */
export type AIAgentUpdate = Message<"redpanda.api.dataplane.v1alpha3.AIAgentUpdate"> & {
  /**
   * User-friendly AI agent name.
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * AI agent description.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * System Prompt for the AI agent behavior.
   *
   * @generated from field: string system_prompt = 3;
   */
  systemPrompt: string;

  /**
   * LLM configuration settings for the AI agent.
   *
   * @generated from field: redpanda.api.dataplane.v1alpha3.AIAgent.Provider provider = 4;
   */
  provider?: AIAgent_Provider;

  /**
   * @generated from field: int32 dimensions = 5;
   */
  dimensions: number;

  /**
   * @generated from field: string model = 6;
   */
  model: string;

  /**
   * Map of MCP servers that this AI agent can use.
   *
   * @generated from field: map<string, redpanda.api.dataplane.v1alpha3.AIAgent.MCPServer> mcp_servers = 7;
   */
  mcpServers: { [key: string]: AIAgent_MCPServer };

  /**
   * A map of tags to add, update or delete.
   * If a tag's value is empty, the server interprets that as a deletion.
   *
   * @generated from field: map<string, string> tags = 8;
   */
  tags: { [key: string]: string };

  /**
   * The number of resources that are guaranteed to be assigned to the AI agent.
   *
   * @generated from field: redpanda.api.dataplane.v1.Pipeline.Resources resources = 9;
   */
  resources?: Pipeline_Resources;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.AIAgentUpdate.
 * Use `create(AIAgentUpdateSchema)` to create a new message.
 */
export const AIAgentUpdateSchema: GenMessage<AIAgentUpdate> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 8);

/**
 * @generated from message redpanda.api.dataplane.v1alpha3.UpdateAIAgentRequest
 */
export type UpdateAIAgentRequest = Message<"redpanda.api.dataplane.v1alpha3.UpdateAIAgentRequest"> & {
  /**
   * AI Agent ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: redpanda.api.dataplane.v1alpha3.AIAgentUpdate ai_agent = 2;
   */
  aiAgent?: AIAgentUpdate;

  /**
   * Specifies which fields should be updated. If not provided,
   * all fields will be updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.UpdateAIAgentRequest.
 * Use `create(UpdateAIAgentRequestSchema)` to create a new message.
 */
export const UpdateAIAgentRequestSchema: GenMessage<UpdateAIAgentRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 9);

/**
 * @generated from message redpanda.api.dataplane.v1alpha3.UpdateAIAgentResponse
 */
export type UpdateAIAgentResponse = Message<"redpanda.api.dataplane.v1alpha3.UpdateAIAgentResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha3.AIAgent ai_agent = 1;
   */
  aiAgent?: AIAgent;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.UpdateAIAgentResponse.
 * Use `create(UpdateAIAgentResponseSchema)` to create a new message.
 */
export const UpdateAIAgentResponseSchema: GenMessage<UpdateAIAgentResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 10);

/**
 * @generated from message redpanda.api.dataplane.v1alpha3.DeleteAIAgentRequest
 */
export type DeleteAIAgentRequest = Message<"redpanda.api.dataplane.v1alpha3.DeleteAIAgentRequest"> & {
  /**
   * AI Agent ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.DeleteAIAgentRequest.
 * Use `create(DeleteAIAgentRequestSchema)` to create a new message.
 */
export const DeleteAIAgentRequestSchema: GenMessage<DeleteAIAgentRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 11);

/**
 * @generated from message redpanda.api.dataplane.v1alpha3.DeleteAIAgentResponse
 */
export type DeleteAIAgentResponse = Message<"redpanda.api.dataplane.v1alpha3.DeleteAIAgentResponse"> & {
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.DeleteAIAgentResponse.
 * Use `create(DeleteAIAgentResponseSchema)` to create a new message.
 */
export const DeleteAIAgentResponseSchema: GenMessage<DeleteAIAgentResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 12);

/**
 * @generated from message redpanda.api.dataplane.v1alpha3.StopAIAgentRequest
 */
export type StopAIAgentRequest = Message<"redpanda.api.dataplane.v1alpha3.StopAIAgentRequest"> & {
  /**
   * AI Agent ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.StopAIAgentRequest.
 * Use `create(StopAIAgentRequestSchema)` to create a new message.
 */
export const StopAIAgentRequestSchema: GenMessage<StopAIAgentRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 13);

/**
 * @generated from message redpanda.api.dataplane.v1alpha3.StopAIAgentResponse
 */
export type StopAIAgentResponse = Message<"redpanda.api.dataplane.v1alpha3.StopAIAgentResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha3.AIAgent ai_agent = 1;
   */
  aiAgent?: AIAgent;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.StopAIAgentResponse.
 * Use `create(StopAIAgentResponseSchema)` to create a new message.
 */
export const StopAIAgentResponseSchema: GenMessage<StopAIAgentResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 14);

/**
 * @generated from message redpanda.api.dataplane.v1alpha3.StartAIAgentRequest
 */
export type StartAIAgentRequest = Message<"redpanda.api.dataplane.v1alpha3.StartAIAgentRequest"> & {
  /**
   * AI Agent ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.StartAIAgentRequest.
 * Use `create(StartAIAgentRequestSchema)` to create a new message.
 */
export const StartAIAgentRequestSchema: GenMessage<StartAIAgentRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 15);

/**
 * @generated from message redpanda.api.dataplane.v1alpha3.StartAIAgentResponse
 */
export type StartAIAgentResponse = Message<"redpanda.api.dataplane.v1alpha3.StartAIAgentResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha3.AIAgent ai_agent = 1;
   */
  aiAgent?: AIAgent;
};

/**
 * Describes the message redpanda.api.dataplane.v1alpha3.StartAIAgentResponse.
 * Use `create(StartAIAgentResponseSchema)` to create a new message.
 */
export const StartAIAgentResponseSchema: GenMessage<StartAIAgentResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 16);

/**
 * AIAgentService is the service for AI Agents.
 * It exposes the API for creating and managing AI agents and their configurations.
 *
 * @generated from service redpanda.api.dataplane.v1alpha3.AIAgentService
 */
export const AIAgentService: GenService<{
  /**
   * CreateAIAgent creates an AI Agent in the Redpanda cluster.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha3.AIAgentService.CreateAIAgent
   */
  createAIAgent: {
    methodKind: "unary";
    input: typeof CreateAIAgentRequestSchema;
    output: typeof CreateAIAgentResponseSchema;
  },
  /**
   * GetAIAgent gets a specific AI Agent.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha3.AIAgentService.GetAIAgent
   */
  getAIAgent: {
    methodKind: "unary";
    input: typeof GetAIAgentRequestSchema;
    output: typeof GetAIAgentResponseSchema;
  },
  /**
   * ListAIAgents implements the list AI agents method which lists the AI agents
   * in the Redpanda cluster.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha3.AIAgentService.ListAIAgents
   */
  listAIAgents: {
    methodKind: "unary";
    input: typeof ListAIAgentsRequestSchema;
    output: typeof ListAIAgentsResponseSchema;
  },
  /**
   * UpdateAIAgent updates a specific AI agent configuration.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha3.AIAgentService.UpdateAIAgent
   */
  updateAIAgent: {
    methodKind: "unary";
    input: typeof UpdateAIAgentRequestSchema;
    output: typeof UpdateAIAgentResponseSchema;
  },
  /**
   * DeleteAIAgent deletes a specific AI agent.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha3.AIAgentService.DeleteAIAgent
   */
  deleteAIAgent: {
    methodKind: "unary";
    input: typeof DeleteAIAgentRequestSchema;
    output: typeof DeleteAIAgentResponseSchema;
  },
  /**
   * StopAIAgent stops a specific AI agent.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha3.AIAgentService.StopAIAgent
   */
  stopAIAgent: {
    methodKind: "unary";
    input: typeof StopAIAgentRequestSchema;
    output: typeof StopAIAgentResponseSchema;
  },
  /**
   * StartAIAgent starts a specific AI agent that has been previously stopped.
   *
   * @generated from rpc redpanda.api.dataplane.v1alpha3.AIAgentService.StartAIAgent
   */
  startAIAgent: {
    methodKind: "unary";
    input: typeof StartAIAgentRequestSchema;
    output: typeof StartAIAgentResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_redpanda_api_dataplane_v1alpha3_ai_agent, 0);

