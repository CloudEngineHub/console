// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file redpanda/api/gatekeeper/v1alpha1/enterprise.proto (package redpanda.api.gatekeeper.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message redpanda.api.gatekeeper.v1alpha1.LicenseSignupRequest
 */
export class LicenseSignupRequest extends Message<LicenseSignupRequest> {
  /**
   * @generated from field: string given_name = 1;
   */
  givenName = "";

  /**
   * @generated from field: string family_name = 2;
   */
  familyName = "";

  /**
   * @generated from field: string company_name = 3;
   */
  companyName = "";

  /**
   * @generated from field: string email = 4;
   */
  email = "";

  /**
   * @generated from field: redpanda.api.gatekeeper.v1alpha1.EnterpriseClusterInfo cluster_info = 5;
   */
  clusterInfo?: EnterpriseClusterInfo;

  /**
   * request_origin is the origin of the request (e.g. console, CLI)
   *
   * @generated from field: redpanda.api.gatekeeper.v1alpha1.LicenseSignupRequest.RequestOrigin request_origin = 6;
   */
  requestOrigin = LicenseSignupRequest_RequestOrigin.UNSPECIFIED;

  constructor(data?: PartialMessage<LicenseSignupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.gatekeeper.v1alpha1.LicenseSignupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "given_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "family_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "company_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "cluster_info", kind: "message", T: EnterpriseClusterInfo },
    { no: 6, name: "request_origin", kind: "enum", T: proto3.getEnumType(LicenseSignupRequest_RequestOrigin) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LicenseSignupRequest {
    return new LicenseSignupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LicenseSignupRequest {
    return new LicenseSignupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LicenseSignupRequest {
    return new LicenseSignupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LicenseSignupRequest | PlainMessage<LicenseSignupRequest> | undefined, b: LicenseSignupRequest | PlainMessage<LicenseSignupRequest> | undefined): boolean {
    return proto3.util.equals(LicenseSignupRequest, a, b);
  }
}

/**
 * @generated from enum redpanda.api.gatekeeper.v1alpha1.LicenseSignupRequest.RequestOrigin
 */
export enum LicenseSignupRequest_RequestOrigin {
  /**
   * @generated from enum value: REQUEST_ORIGIN_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: REQUEST_ORIGIN_CONSOLE = 1;
   */
  CONSOLE = 1,

  /**
   * @generated from enum value: REQUEST_ORIGIN_CLI = 2;
   */
  CLI = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(LicenseSignupRequest_RequestOrigin)
proto3.util.setEnumType(LicenseSignupRequest_RequestOrigin, "redpanda.api.gatekeeper.v1alpha1.LicenseSignupRequest.RequestOrigin", [
  { no: 0, name: "REQUEST_ORIGIN_UNSPECIFIED" },
  { no: 1, name: "REQUEST_ORIGIN_CONSOLE" },
  { no: 2, name: "REQUEST_ORIGIN_CLI" },
]);

/**
 * @generated from message redpanda.api.gatekeeper.v1alpha1.EnterpriseClusterInfo
 */
export class EnterpriseClusterInfo extends Message<EnterpriseClusterInfo> {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId = "";

  /**
   * @generated from field: redpanda.api.gatekeeper.v1alpha1.EnterpriseClusterInfo.Platform platform = 2;
   */
  platform = EnterpriseClusterInfo_Platform.UNSPECIFIED;

  constructor(data?: PartialMessage<EnterpriseClusterInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.gatekeeper.v1alpha1.EnterpriseClusterInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "platform", kind: "enum", T: proto3.getEnumType(EnterpriseClusterInfo_Platform) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnterpriseClusterInfo {
    return new EnterpriseClusterInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnterpriseClusterInfo {
    return new EnterpriseClusterInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnterpriseClusterInfo {
    return new EnterpriseClusterInfo().fromJsonString(jsonString, options);
  }

  static equals(a: EnterpriseClusterInfo | PlainMessage<EnterpriseClusterInfo> | undefined, b: EnterpriseClusterInfo | PlainMessage<EnterpriseClusterInfo> | undefined): boolean {
    return proto3.util.equals(EnterpriseClusterInfo, a, b);
  }
}

/**
 * @generated from enum redpanda.api.gatekeeper.v1alpha1.EnterpriseClusterInfo.Platform
 */
export enum EnterpriseClusterInfo_Platform {
  /**
   * @generated from enum value: PLATFORM_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PLATFORM_REDPANDA = 1;
   */
  REDPANDA = 1,

  /**
   * @generated from enum value: PLATFORM_NON_REDPANDA = 2;
   */
  NON_REDPANDA = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(EnterpriseClusterInfo_Platform)
proto3.util.setEnumType(EnterpriseClusterInfo_Platform, "redpanda.api.gatekeeper.v1alpha1.EnterpriseClusterInfo.Platform", [
  { no: 0, name: "PLATFORM_UNSPECIFIED" },
  { no: 1, name: "PLATFORM_REDPANDA" },
  { no: 2, name: "PLATFORM_NON_REDPANDA" },
]);

/**
 * @generated from message redpanda.api.gatekeeper.v1alpha1.LicenseSignupResponse
 */
export class LicenseSignupResponse extends Message<LicenseSignupResponse> {
  /**
   * @generated from field: redpanda.api.gatekeeper.v1alpha1.LicenseSignupResponse.License license = 2;
   */
  license?: LicenseSignupResponse_License;

  constructor(data?: PartialMessage<LicenseSignupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.gatekeeper.v1alpha1.LicenseSignupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "license", kind: "message", T: LicenseSignupResponse_License },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LicenseSignupResponse {
    return new LicenseSignupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LicenseSignupResponse {
    return new LicenseSignupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LicenseSignupResponse {
    return new LicenseSignupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LicenseSignupResponse | PlainMessage<LicenseSignupResponse> | undefined, b: LicenseSignupResponse | PlainMessage<LicenseSignupResponse> | undefined): boolean {
    return proto3.util.equals(LicenseSignupResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.gatekeeper.v1alpha1.LicenseSignupResponse.License
 */
export class LicenseSignupResponse_License extends Message<LicenseSignupResponse_License> {
  /**
   * @generated from field: string license_key = 1;
   */
  licenseKey = "";

  /**
   * @generated from field: google.protobuf.Timestamp expiration = 2;
   */
  expiration?: Timestamp;

  constructor(data?: PartialMessage<LicenseSignupResponse_License>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.gatekeeper.v1alpha1.LicenseSignupResponse.License";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "license_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expiration", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LicenseSignupResponse_License {
    return new LicenseSignupResponse_License().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LicenseSignupResponse_License {
    return new LicenseSignupResponse_License().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LicenseSignupResponse_License {
    return new LicenseSignupResponse_License().fromJsonString(jsonString, options);
  }

  static equals(a: LicenseSignupResponse_License | PlainMessage<LicenseSignupResponse_License> | undefined, b: LicenseSignupResponse_License | PlainMessage<LicenseSignupResponse_License> | undefined): boolean {
    return proto3.util.equals(LicenseSignupResponse_License, a, b);
  }
}

