syntax = "proto3";

package redpanda.api.dataplane.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "redpanda/api/auth/v1/authorization.proto";

// Defines the MCP server resource.
message MCPServer {
  option (google.api.resource) = {
    type: "redpanda.api.dataplane.v1/MCPServer"
    singular: "mcp_server"
    plural: "mcp_servers"
  };
  // MCP Server ID.
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];

  // User-friendly MCP server name.
  string display_name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_ /]+$",
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 128
  ];

  // Optional MCP server description.
  string description = 3 [(buf.validate.field).string.max_len = 256];

  // A configuration file for the MCP server.
  message Configuration {
    // The path to the configuration file, this path must be relative and also valid in to layout in a filesystem,
    // when considering many paths in a full configuration.
    string path = 1 [
      (google.api.field_behavior) = REQUIRED,
      (buf.validate.field).required = true,
      // Force a relative path pattern
      (buf.validate.field).string.pattern = "^[A-Za-z0-9-_][A-Za-z0-9-_ /]+$",
      (buf.validate.field).string.min_len = 3,
      (buf.validate.field).string.max_len = 128
    ];
    // The contents of the configuration file in YAML format.
    string contents = 2 [
      (google.api.field_behavior) = REQUIRED,
      (buf.validate.field).required = true,
      (buf.validate.field).string.min_len = 1
    ];
  }

  // All the configuration files for the MCP server.
  repeated Configuration config_files = 4 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).repeated.min_items = 1,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The Redpanda Connect MCP server configuration in files.."}
  ];

  // The number of resources that are guaranteed to be assigned to the MCP server.
  Resources resources = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The requested amount of resources for the MCP server. Depending on the backend, the resources might be guaranteed, or might be tweaked based on the utilization of the MCP server."}];

  // The current MCP server state.
  State state = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  Status status = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // URL to connect to the MCP server
  string url = 8 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Tags are key-value pairs that can be assigned to a MCP server resource.
  // They help organize MCP servers and enable filtering when listing them.
  map<string, string> tags = 9 [(buf.validate.field).map = {
    max_pairs: 16
    values: {
      string: {pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"}
    }
  }];

  message Resources {
    // `memory_shares` is a string specifying the amount of memory to allocate for
    // the MCP server.
    //
    // This follows the [Kubernetes quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/) format. Acceptable units
    // include:
    // - Decimal SI units: "K", "M", "G", "T", "P", "E" (e.g., "128M" for 128
    //   megabytes)
    // - Binary SI units: "Ki", "Mi", "Gi", "Ti", "Pi", "Ei" (e.g., "512Mi" for
    // 512 mebibytes) If you don't specify a unit, the value is interpreted as
    // bytes.
    string memory_shares = 1 [
      (google.api.field_behavior) = REQUIRED,
      (buf.validate.field).required = true
    ];
    // `cpu_shares` is a string specifying the amount of CPU to allocate for the
    // MCP server.
    //
    // This follows the [Kubernetes quantity](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/) format. Acceptable
    // units include:
    // - Decimal SI units: "m" (e.g., "500m" for 500 millicores, "2" for 2 cores)
    // CPU shares can be specified in millicores (1 core = 1000 millicores).
    // If you don't specify a unit, the value is interpreted as the number of cores.
    string cpu_shares = 2 [
      (google.api.field_behavior) = REQUIRED,
      (buf.validate.field).required = true
    ];
  }

  // State of the MCP server.
  enum State {
    STATE_UNSPECIFIED = 0;
    // The MCP server is starting.
    STATE_STARTING = 1;
    // The MCP server is running.
    STATE_RUNNING = 2;
    // The MCP server is in the process of stopping.
    STATE_STOPPING = 3;
    // The MCP server is stopped and in paused state.
    STATE_STOPPED = 4;
    // The MCP server encountered an error.
    STATE_ERROR = 5;
    // The MCP server has completed the job successfully.
    STATE_COMPLETED = 6;
  }

  // MCP server status may contain an error message.
  message Status {
    string error = 2;
  }
}

// MCPServer is the service for Redpanda Connect MCP Servers.
// It exposes the API for creating and managing Redpanda Connect MCP servers and their configurations.
service MCPServerService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    name: "Redpanda Connect MCP servers"
    description: "Create and manage Redpanda Connect MCP servers and their configurations."
  };

  // CreateMCPServer creates a Redpanda Connect MCP Server in the Redpanda cluster.
  rpc CreateMCPServer(CreateMCPServerRequest) returns (CreateMCPServerResponse) {
    option (google.api.http) = {
      post: "/v1/redpanda-connect/mcp-servers"
      body: "mcp_server"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Redpanda Connect MCP Server"
      description: "Create a new Redpanda Connect MCP Server."
      responses: {
        key: "201"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1.MCPServer"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_EDIT
      api: API_REDPANDA_MCP_SERVER
    };
  }

  // GetMCPServer gets a specific Redpanda Connect MCP Server.
  rpc GetMCPServer(GetMCPServerRequest) returns (GetMCPServerResponse) {
    option (google.api.http) = {get: "/v1/redpanda-connect/mcp-servers/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Redpanda Connect MCP server"
      description: "Get a specific Redpanda Connect MCP server."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1.MCPServer"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_REDPANDA_MCP_SERVER
    };
  }

  // ListMCPServers implements the list mcp_servers method which lists the MCP servers
  // in the Redpanda cluster.
  rpc ListMCPServers(ListMCPServersRequest) returns (ListMCPServersResponse) {
    option (google.api.http) = {get: "/v1/redpanda-connect/mcp-servers"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Redpanda Connect MCP Servers"
      description: "List Redpanda Connect MCP Servers. Optional: filter based on MCP server name."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1.ListMCPServersResponse"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_REDPANDA_MCP_SERVER
    };
  }

  // Update MCPServer updates a specific Redpanda Connect MCP server configuration.
  rpc UpdateMCPServer(UpdateMCPServerRequest) returns (UpdateMCPServerResponse) {
    option (google.api.http) = {
      put: "/v1/redpanda-connect/mcp-servers/{id}"
      body: "mcp_server"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a Redpanda Connect MCP Server"
      description: "Update the configuration of a Redpanda Connect MCP server."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1.MCPServer"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_EDIT
      api: API_REDPANDA_MCP_SERVER
    };
  }

  // DeleteMCPServer deletes a specific Redpanda Connect MCP server.
  rpc DeleteMCPServer(DeleteMCPServerRequest) returns (DeleteMCPServerResponse) {
    option (google.api.http) = {delete: "/v1/redpanda-connect/mcp-servers/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a Redpanda Connect MCP server"
      description: "Delete a Redpanda Connect MCP server."
      responses: {
        key: "204"
        value: {
          description: "Deleted"
          schema: {}
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_EDIT
      api: API_REDPANDA_MCP_SERVER
    };
  }

  // StopMCPServer stops a specific Redpanda Connect MCP server.
  rpc StopMCPServer(StopMCPServerRequest) returns (StopMCPServerResponse) {
    option (google.api.http) = {post: "/v1/redpanda-connect/mcp-servers/{id}:stop"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Stops a Redpanda Connect MCP server"
      description: "Stop a running Redpanda Connect MCP server."
      responses: {
        key: "200"
        value: {
          description: "Stopped"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1.MCPServer"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_EDIT
      api: API_REDPANDA_MCP_SERVER
    };
  }

  // StartMCPServer starts a specific Redpanda Connect MCP server that has been previously stopped.
  rpc StartMCPServer(StartMCPServerRequest) returns (StartMCPServerResponse) {
    option (google.api.http) = {post: "/v1/redpanda-connect/mcp-servers/{id}:start"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Start a Redpanda Connect MCP server"
      description: "Start a stopped Redpanda Connect MCP server."
      responses: {
        key: "200"
        value: {
          description: "Started"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1.MCPServer"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_EDIT
      api: API_REDPANDA_MCP_SERVER
    };
  }

  // The configuration schema includes available components and processors in this Redpanda Connect MCP Server instance.
  rpc GetMCPServerServiceConfigSchema(GetMCPServerServiceConfigSchemaRequest) returns (GetMCPServerServiceConfigSchemaResponse) {
    option (google.api.http) = {get: "/v1/redpanda-connect/mcp-config-schema"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Retrieve the schema for Redpanda Connect MCP Servers configurations."
      description: "The configuration schema includes available components and processors in this Redpanda Connect MCP Server instance."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaResponse"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_REDPANDA_MCP_SERVER
    };
  }

  // GetMCPServersForSecret implements the get MCP servers for secret method which lists the MCP servers
  // in the Redpanda cluster for the given secret.
  rpc GetMCPServersForSecret(GetMCPServersForSecretRequest) returns (GetMCPServersForSecretResponse) {
    option (google.api.http) = {get: "/v1/redpanda-connect/mcp-servers-for-secret"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Redpanda Connect MCP servers for secret"
      description: "Get Redpanda Connect MCP servers for a given secret."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1.GetMCPServersForSecretResponse"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_REDPANDA_MCP_SERVER
    };
  }

  // GetMCPServersBySecrets implements the get MCP servers by secrets method which lists the MCP servers
  // in the Redpanda cluster for all secrets.
  rpc GetMCPServersBySecrets(GetMCPServersBySecretsRequest) returns (GetMCPServersBySecretsResponse) {
    option (google.api.http) = {get: "/v1/redpanda-connect/mcp-servers-by-secrets"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Redpanda Connect MCP servers by secrets"
      description: "Get Redpanda Connect MCP servers by secrets."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1.GetMCPServersBySecretsResponse"}
          }
        }
      }
    };
    option (redpanda.api.auth.v1.authorization) = {
      required_permission: PERMISSION_VIEW
      api: API_REDPANDA_MCP_SERVER
    };
  }
}

// MCPServerCreate contains the details for the MCP Server creation request.
message MCPServerCreate {
  option (google.api.resource) = {
    type: "redpanda.api.dataplane.v1/MCPServerCreate"
    singular: "mcp_server"
    plural: "mcp_servers"
  };

  // User-friendly MCP server name.
  string display_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_ /]+$",
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 128
  ];

  // MCP server description.
  string description = 2 [(buf.validate.field).string.max_len = 256];

  // All the configuration files for the MCP server.
  repeated MCPServer.Configuration config_files = 3 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).repeated.min_items = 1,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The Redpanda Connect MCP server configuration in files.."}
  ];

  // The number of resources that are guaranteed to be assigned to the MCP server.
  MCPServer.Resources resources = 4;

  // Optional list of tags to attach to a MCP server.
  map<string, string> tags = 5 [(buf.validate.field).map = {
    max_pairs: 16
    values: {
      string: {pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"}
    }
  }];
}

// CreateMCPServerRequest is the request of CreateMCPServer.
message CreateMCPServerRequest {
  MCPServerCreate mcp_server = 1;
}

message CreateMCPServerResponse {
  MCPServer mcp_server = 1;
}

message GetMCPServerRequest {
  // MCP server ID.
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];
}

message GetMCPServerResponse {
  MCPServer mcp_server = 1;
}

message ListMCPServersRequest {
  // List filter.
  Filter filter = 1;

  // Limit the paginated response to a number of items.
  int32 page_size = 2 [
    (buf.validate.field).int32 = {
      gte: -1
      lte: 1000
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Limit the paginated response to a number of items. Defaults to 100. Use -1 to disable pagination."
      minimum: -1
      maximum: 1000
    }
  ];

  // Value of the next_page_token field returned by the previous response.
  // If not provided, the system assumes the first page is requested.
  string page_token = 3;

  message Filter {
    // Substring match on MCP server name. Case-sensitive.
    string name_contains = 1 [
      (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED,
      (buf.validate.field).string.pattern = "^[A-Za-z0-9-_ /]+$",
      (buf.validate.field).string.max_len = 128,
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Any MCP Server that partially match this name will be returned."}
    ];

    // Filter MCP servers that contain all of these key/value pairs.
    map<string, string> tags = 2 [
      (buf.validate.field).map = {
        max_pairs: 16
        values: {
          string: {pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"}
        }
      },
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "MCP servers that match all the provided tags will be returned."}
    ];
  }
}

message ListMCPServersResponse {
  repeated MCPServer mcp_servers = 1;
  string next_page_token = 2;
}

message MCPServerUpdate {
  option (google.api.resource) = {
    type: "redpanda.api.dataplane.v1/MCPServerUpdate"
    singular: "mcp_server"
    plural: "mcp_servers"
  };

  // User-friendly MCP servers name.
  string display_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_ /]+$",
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 128
  ];

  // MCP server description.
  string description = 2 [
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED,
    (buf.validate.field).string.max_len = 256
  ];

  // All the configuration files for the MCP server.
  repeated MCPServer.Configuration config_files = 3 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).repeated.min_items = 1,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The Redpanda Connect MCP server configuration in files.."}
  ];

  // The number of resources that are guaranteed to be assigned to the MCP server.
  MCPServer.Resources resources = 4;

  // A map of tags to add, update or delete.
  // If a tag's value is empty, the server interprets that as a deletion.
  map<string, string> tags = 5 [(buf.validate.field).map = {
    max_pairs: 16
    values: {
      string: {pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"}
    }
  }];
}

message UpdateMCPServerRequest {
  // MCP Server ID.
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];

  MCPServerUpdate mcp_server = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];

  // Specifies which fields should be updated. If not provided,
  // all fields will be updated.
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateMCPServerResponse {
  MCPServer mcp_server = 1;
}

message DeleteMCPServerRequest {
  // MCP Server ID.
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];
}

message DeleteMCPServerResponse {}

message StopMCPServerRequest {
  // MCP Server ID.
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];
}

message StopMCPServerResponse {
  MCPServer mcp_server = 1;
}

message StartMCPServerRequest {
  // MCP Server ID.
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];
}

message StartMCPServerResponse {
  MCPServer mcp_server = 1;
}

message GetMCPServerServiceConfigSchemaRequest {}

message GetMCPServerServiceConfigSchemaResponse {
  message ConfigurationFileSchema {
    // The glob pattern that matches the configuration file paths.
    //
    // Example: "o11y/*.yaml" or "processors/*.yaml"
    //
    // Single and double asterisks are supported.
    string path_pattern = 1;
    // JSON schema of the configuration components that are allowed for MCP Servers.
    string config_schema = 2;
  }
  repeated ConfigurationFileSchema configuration_files = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The configuration schema for the MCP Server."}
  ];
}

message MCPServersForSecret {
  string secret_id = 1;
  repeated MCPServer mcp_servers = 2;
}

message GetMCPServersForSecretRequest {
  // Secret ID.
  string secret_id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Z][A-Z0-9_]*$"
  ];
}

message GetMCPServersForSecretResponse {
  MCPServersForSecret mcp_servers_for_secret = 1;
}

message GetMCPServersBySecretsRequest {}

message GetMCPServersBySecretsResponse {
  repeated MCPServersForSecret mcp_servers_for_secret = 1;
}
